<!DOCTYPE html>

<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Visual Learning Plattform for Data Structure and Algo</title>
<link rel="stylesheet" type="text/css" href="fonts/silkscreen/stylesheet.css">
<link rel="stylesheet" type="text/css" href="css/common.css">
<link rel="stylesheet" href="css/viz-1.0.1.css">
<link rel="stylesheet" href="css/visual.css">
<link rel="stylesheet" href="css/drawgraph.css">
<link href="https://fonts.googleapis.com/css?family=Raleway:300" rel="stylesheet">
<style>
*{
  font-family: 'Raleway', sans-serif;
}
#e-lecture {
  top: 45px;
  right: 130px;
  width: 400px;
  display: block;
  background: none;
  overflow: normal;
  white-space: normal;
  text-align: right;
  color: black; font-weight: bold; font-size: 20px;
}
.electure-prev, .electure-next 
  position: absolute;
  /* bottom: -12px; */
  top: -20px;
  bottom: '';
  padding: 3px 8px;
  background: #999;
  color: white;
  cursor: pointer;
  border-radius: 2px;
}
.electure-prev {
  left: -10px;
  /* right: 30px; */
}
.electure-next {
  right: -10px;
  color: white;
}
</style>

<style>
.execAction { padding: 5px 8px; }
.err { padding: 5px 0px; }
#actions-extras input {
  width: 35px;
  padding: 5px 8px 7px;
}

.create { bottom: 92px; }
.sort { bottom: 65px; }

#create-sorted-increasing { float: left; padding: none; }
#create-sorted-decreasing { float: left; padding: none; }
#create-nearly-sorted-increasing { float: left; padding: none; }
#create-nearly-sorted-decreasing { float: left; padding: none; }
#create-userdefined-input input { width: 300px; }

text {
  fill: black;
  font: 20px sans-serif;
  text-anchor: middle; 
}

#viz-radix-sort-canvas {
  position: fixed;
  top: 50%;
  left: 50%;
  margin-top: -250px;
  margin-left: -500px;
  height: 500px;
  width: 1000px;
}

div .radix-sort-element {
  position: absolute;
  border: 1px solid black;
  width: 55px;
  font: 20px sans-serif;
  color: black;
}

#radix-sort-bucket-labels-collection {
  position: absolute;
  bottom: 0px;
  left: 0px;
}

.radix-sort-bucket-label {
  position: absolute;
  border-top: 1px solid black;
  width: 57px;
  font: 20px sans-serif;
  color: black;
}

#sort-viz {
  width: 100%;
  text-align: center;
  overflow: hidden;
  padding-top: 10px;
}
</style>


<script type="text/javascript" src="Custom.js"></script>
</head>

<body>
<div id="top-bar">
  <a id="home" href="#" "><span ><strong>Visual Learning Platform for Data Structure and Algorithm</strong></span><span style="font-size: 40%"></span></a>
  
  <span id="title">
    <a id='title-Bubble' class='selected-viz'>Bubble</a>
    <a id='title-Selection' >Select</a>
    <a id='title-Insertion' >Insert</a>
    <a id='title-Merge' >Merge</a>
    <a id='title-Quick' >Quick</a>
    <!-- <a id='title-RandomizedQuick' >R-Quick</a> -->
    <!-- <a id='title-Counting' >Count</a> -->
    <!-- <a id='title-Radix' >Radix</a> -->
  </span>
  
</div>

<div id="dark-overlay"></div>

<div id="status" class="panel" style="box-shadow: 5px 5px 5px black;"><p></p></div>
<div id="status-hide" class="panel-hide" style="border-radius: 50%"><img src="img/arrow_white_right.png" alt=">" title="show/hide status panel"/></div>

<div id="codetrace" class="panel" style="box-shadow: 5px 5px 5px black;">
  <p id="code1" style="padding-top: 10px;"></p>
  <p id="code2"></p>
  <p id="code3"></p>
  <p id="code4"></p>
  <p id="code5"></p>
  <p id="code6"></p>
  <p id="code7" style="padding-bottom: 10px;"></p>
</div>
<div id="codetrace-hide" class="panel-hide" style="border-radius: 50%"><img src="img/arrow_white_right.png" alt=">" title="show/hide codetrace panel"/></div>

<div id="left-bar"></div>
<div id="right-bar"></div>

<!-- <div id="media-controls">
<div id='speed-control'>Go slow<div id='speed-input'></div>Be fast</div>
  <span id="go-to-beginning" class="media-control-button" title="go to beginning" onclick=goToBeginning()><img src="img/goToBeginning.png" alt="go to beginning"></span>
  <span id="previous" class="media-control-button" title="step backward" onclick=stepBackward()><img src="img/prevFrame.png" alt="previous frame"></span>
  <span id="pause" class="media-control-button" title="pause" onclick=pause()><img src="img/pause.png" alt="pause"></span>
  <span id="play" class="media-control-button" title="play" onclick=play()><img src="img/play.png" alt="play"></span>
  <span id="next" class="media-control-button" title="step forward" onclick=stepForward()><img src="img/nextFrame.png" alt="next frame"></span>
  <span id="go-to-end" class="media-control-button" title="go to end" onclick=goToEnd()><img src="img/goToEnd.png" alt="go to end"></span>
  <div id="progress-bar" class="media-control-button"></div>
</div>
 -->

<div id='e-lecture' class='panel'></div>

<div id="overlay" hidden></div>
<div id="dropdown-temp-holder" hidden></div>



<div id="sort-viz" style="background: #72ef62;">
  <svg id="viz-canvas" style="background: #000; box-shadow: 1px 10px 20px 7px grey;"></svg><br>
  <svg id="viz-counting-sort-secondary-canvas"></svg>
  <div id="viz-radix-sort-canvas" >
    <span id="radix-sort-bucket-labels-collection">
      <span class="radix-sort-bucket-label">0</span>
      <span class="radix-sort-bucket-label">1</span>
      <span class="radix-sort-bucket-label">2</span>
      <span class="radix-sort-bucket-label">3</span>
      <span class="radix-sort-bucket-label">4</span>
      <span class="radix-sort-bucket-label">5</span>
      <span class="radix-sort-bucket-label">6</span>
      <span class="radix-sort-bucket-label">7</span>
      <span class="radix-sort-bucket-label">8</span>
      <span class="radix-sort-bucket-label">9</span>
    </span>
  </div>
</div>
<div id="current-action" class="panel"><p style="color: white"></p></div>
<div id="actions" class="panel" style="box-shadow: 5px 5px 5px black;">
  <p id="create">Create array by own</p>
  <p id="sort">Let's Sort</p>
</div>
<div id="actions-hide" class="panel-hide" style="border-radius: 50%"><img src="img/arrow_white_right.png" alt=">" title="show/hide actions panel"/ ></div>
<div id="actions-extras">
  <div class="create action-menu-pullout">
    <div id="create-random" class="execAction new-menu-option coloured-menu-option" onclick="createList('random')"><p>Random</p></div>
    <div id="create-sorted" class="execAction new-menu-option coloured-menu-option" onclick="triggerSubmenu('sorted')">
      <p>Sorted</p>
      <div id="create-sorted-increasing" class="execAction coloured-menu-option" onclick="createList('sorted-increasing')"><p>Increasing</p></div>
      <div id="create-sorted-decreasing" class="execAction new-menu-option coloured-menu-option" onclick="createList('sorted-decreasing')"><p>Decreasing</p></div>
    </div>
    <div id="create-nearly-sorted" class="execAction new-menu-option coloured-menu-option" onclick="triggerSubmenu('nearly-sorted')">
      <p>Nearly sorted</p>
      <div id="create-nearly-sorted-increasing" class="execAction coloured-menu-option" onclick="createList('nearly-sorted-increasing')"><p>Increasing</p></div>
      <div id="create-nearly-sorted-decreasing" class="execAction new-menu-option coloured-menu-option" onclick="createList('nearly-sorted-decreasing')"><p>Decreasing</p></div>
    </div>
    <div id="create-userdefined-input" class="new-menu-option"><input type="text" id="userdefined-input" title="Enter a list of numbers, separated by commas." autocomplete="off" value="3,44,38,5,47,15,36,26,27,2,46,4,19,50,48"></div>
    <div id="create-userdefined-go" class="execAction new-menu-option coloured-menu-option" onclick="createList('userdefined')"><p>Go</p></div>
    <div id="create-err" class="err"></div>
  </div>
  <div class="sort action-menu-pullout">
 <!--    <div id="sort-bubble-merge-inversion" class="execAction new-menu-option coloured-menu-option"><input type="checkbox" id="sort-bubble-merge-inversion-checkbox">&nbsp;Compute Inversion Index</div> -->
    <div id="sort-go" class="execAction new-menu-option coloured-menu-option" onclick="sort()"><p>Go</p></div>
    <div id="sort-err" class="err"></div>
  </div>
</div>

<div id="bottom-bar">
  <a id="trigger-about">About Project</a>
  <a id="trigger-team">Team</a>
  <a id="trigger-terms">FAQ</a>
</div>

<div id="about" class="overlays">
  <h4>About</h4><span class='close-overlay'>&#x2715;</span>
  <div class='content'>
    <p>Visual Learning Platform for Data Structure and Algo is an Web App to provide Visual Learning Interface for Data Structure and Algo.
    </p>
  </div>
</div>

<div id="team" class="overlays">
  <h4>Team</h4><span class='close-overlay'>&#x2715;</span>
  <div class='content'>
    <p>
      <strong><span style='line-height: 150%;'>AKASH SHAKYA, B.E, CSE - FINAL YEAR</span></strong><br>
      
    </p>

    <p>
      <strong><span style='line-height: 150%;'>NAVEEN CHANDRAVANSHI, B.E, CSE - FINAL YEAR</span></strong><br>
     
    </p>

    
  </div>
</div>

<script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>


<script type="text/javascript">
var PHP_DOMAIN = "";

// surprise colour!
// Referenced to in  home.js and viz.js also
var colourArray = ["#52bc69", "#d65775"/*"#ed5a7d"*/, "#2ebbd1", "#d9513c", "#fec515", "#4b65ba", "#ff8a27", "#a7d41e"]; // green, pink, blue, red, yellow, indigo, orange, lime

function disableScroll() { $('html').css('overflow', 'hidden'); }

function enableScroll() { $('html').css('overflow', 'visible'); }

function replaceAll(find, replace, str) { return str.replace(new RegExp(find, 'g'), replace); }

function getColours() {
  var generatedColours = new Array();
  while (generatedColours.length < 4) {
    var n = (Math.floor(Math.random() * colourArray.length));
    if ($.inArray(n, generatedColours) == -1)
      generatedColours.push(n);
  }
  return generatedColours;
}

function isOn(value, position) {
  return (value>>position) & 1 === 1;
}

function customAlert(msg) {
  $('#custom-alert p').html(msg);
  var m = -1 * ($('#custom-alert').outerHeight()/2);
  $('#custom-alert').css('margin-top', m+'px');
  $('#dark-overlay').fadeIn(function() {
    $('#custom-alert').fadeIn(function() {
      setTimeout(function() {
        $('#custom-alert').fadeOut(function() {
          $('#dark-overlay').fadeOut();
        });
      }, 1000);
    });
  });
}

function showLoadingScreen() {
  $('#loading-overlay').show();
  $('#loading-message').show();
}

function hideLoadingScreen() {
  $('#loading-overlay').hide();
}

function commonAction(retval, msg) {
  //setTimeout(function() {
    if (retval) { // mode == "exploration" && // now not only for exploration mode, but check if this opens other problems
      $('#current-action').show();
      $('#current-action').html(mode == "exploration" ? msg : ("e-Lecture Example (auto play until done)<br>" + msg));
      $('#progress-bar').slider("option", "max", gw.getTotalIteration()-1);
      triggerRightPanels();
      isPlaying = true;
    }
  //}, 500);
}

function getQueryVariable(variable) {
  var query = window.location.search.substring(1);
  var vars = query.split('&');
  for (var i = 0; i < vars.length; i++) {
    var pair = vars[i].split('=');
    if (decodeURIComponent(pair[0]) == variable)
      return decodeURIComponent(pair[1]);
  }
  return "";
}

var generatedColours = getColours();
var surpriseColour = colourArray[generatedColours[0]];
var colourTheSecond = colourArray[generatedColours[1]];
var colourTheThird = colourArray[generatedColours[2]];
var colourTheFourth = colourArray[generatedColours[3]];

$(function() {
  $('.links').css('background', surpriseColour);
  $('.right-links').css('background', surpriseColour);
  $('#login-go').css('background', surpriseColour);

  $('.colour').css("color", surpriseColour); // name
  $('h4').css("background-color", surpriseColour); // about, contact us etc. button background

  // title
  $('#title a').click(function() {
    $('#title a').removeClass('selected-viz');
    $(this).addClass('selected-viz');
   
    setTimeout(function(){ document.body.style.zoom = "100.1%"; }, 100); // force resize/redraw...
    setTimeout(function(){ document.body.style.zoom = "100%"; }, 600);
  });

  // overlays stuffs
  $('#trigger-about').click(function() {
    if ($(window).width() > 600) {
      $('#dark-overlay').fadeIn(function() {
        $('#about').fadeIn();
      });
    }
    else
      alert('Sorry, this dialog is too big. Please load it on bigger screen');
  });

  $('#trigger-team').click(function() {
    if ($(window).width() > 600) {
      $('#dark-overlay').fadeIn(function() {
        $('#team').fadeIn();
      });
    }
    else
      alert('Sorry, this dialog is too big. Please load it on bigger screen');
  });

  $('#trigger-terms').click(function() {
    if ($(window).width() > 600) {
      $('#dark-overlay').fadeIn(function() {
        $('#termsofuse').fadeIn();
      });
    }
    else
      alert('Sorry, this dialog is too big. Please load it on bigger screen');
  });

  $('.close-overlay').click(function() {
    $('.overlays').fadeOut(function() {
      $('#dark-overlay').fadeOut();
    });
  });

  $('#dark-overlay').click(function() {
    $('.overlays').fadeOut();
    $('#dark-overlay').fadeOut();
  });

 
});


</script>
<script type="text/javascript" src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js" integrity="sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=" crossorigin="anonymous"></script>

<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.16/d3.min.js"></script>
<script type="text/javascript" src="js/viz-1.0.3.js"></script>
<script type="text/javascript" src="js/graph_library-1.0.1.min.js"></script>

<script>
function runSlide(slide) {
  if (slide == '1') {
    $("#e-lecture").html("slide " + slide + " (" + 1 + "%)");
    $('#title-Bubble').click();
$("#sort").click().addClass("menu-highlighted");
changeSortType(gw.bubbleSort, "29,10,14,37,13");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '1-1') {
    $("#e-lecture").html("slide " + slide + " (" + 2 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '1-2') {
    $("#e-lecture").html("slide " + slide + " (" + 4 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '2') {
    $("#e-lecture").html("slide " + slide + " (" + 5 + "%)");
    
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '2-1') {
    $("#e-lecture").html("slide " + slide + " (" + 7 + "%)");
    $("#create").click().addClass("menu-highlighted");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '2-2') {
    $("#e-lecture").html("slide " + slide + " (" + 8 + "%)");
    $('#title-Bubble').click();
$("#sort").click().addClass("menu-highlighted");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '3') {
    $("#e-lecture").html("slide " + slide + " (" + 10 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '4') {
    $("#e-lecture").html("slide " + slide + " (" + 11 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '4-1') {
    $("#e-lecture").html("slide " + slide + " (" + 13 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '5') {
    $("#e-lecture").html("slide " + slide + " (" + 14 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '6') {
    $("#e-lecture").html("slide " + slide + " (" + 15 + "%)");
    $('#title-Bubble').click();
$("#sort").click().addClass("menu-highlighted");
changeSortType(gw.bubbleSort, "29,10,14,37,13");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '6-1') {
    $("#e-lecture").html("slide " + slide + " (" + 17 + "%)");
    $('#title-Bubble').click();
$("#sort").click().addClass("menu-highlighted");
changeSortType(gw.bubbleSort, "29,10,14,37,13");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '6-2') {
    $("#e-lecture").html("slide " + slide + " (" + 18 + "%)");
    $('#title-Bubble').click();
$("#sort").click().addClass("menu-highlighted");
changeSortType(gw.bubbleSort, "3,6,11,25,39");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '6-3') {
    $("#e-lecture").html("slide " + slide + " (" + 20 + "%)");
    $('#title-Bubble').click();
$("#sort").click().addClass("menu-highlighted");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '7') {
    $("#e-lecture").html("slide " + slide + " (" + 21 + "%)");
    $('#title-Selection').click();
$("#sort").click().addClass("menu-highlighted");
changeSortType(gw.selectionSort, "29,10,14,37,13");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '7-1') {
    $("#e-lecture").html("slide " + slide + " (" + 23 + "%)");
    $('#title-Selection').click();
$("#sort").click().addClass("menu-highlighted");
changeSortType(gw.selectionSort, "29,10,14,37,13");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '7-2') {
    $("#e-lecture").html("slide " + slide + " (" + 24 + "%)");
    $('#title-Selection').click();
$("#sort").click().addClass("menu-highlighted");
changeSortType(gw.selectionSort, "29,10,14,37,13");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '8') {
    $("#e-lecture").html("slide " + slide + " (" + 26 + "%)");
    $('#title-Insertion').click();
$("#sort").click().addClass("menu-highlighted");
changeSortType(gw.insertionSort, "40,13,20,8");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '8-1') {
    $("#e-lecture").html("slide " + slide + " (" + 27 + "%)");
    $('#title-Insertion').click();
$("#sort").click().addClass("menu-highlighted");
changeSortType(gw.insertionSort, "40,13,20,8");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '8-2') {
    $("#e-lecture").html("slide " + slide + " (" + 28 + "%)");
    $('#title-Insertion').click();
$("#sort").click().addClass("menu-highlighted");
changeSortType(gw.insertionSort, "40,13,20,8");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '8-3') {
    $("#e-lecture").html("slide " + slide + " (" + 30 + "%)");
    $('#title-Insertion').click();
$("#sort").click().addClass("menu-highlighted");
changeSortType(gw.insertionSort, "40,13,20,8");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '9') {
    $("#e-lecture").html("slide " + slide + " (" + 31 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '10') {
    $("#e-lecture").html("slide " + slide + " (" + 33 + "%)");
    $('#title-Merge').click();
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '10-1') {
    $("#e-lecture").html("slide " + slide + " (" + 34 + "%)");
    $('#title-Merge').click();
changeSortType(gw.mergeSort, "1,5,19,20,2,11,15,17");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '10-2') {
    $("#e-lecture").html("slide " + slide + " (" + 36 + "%)");
    $('#title-Merge').click();
changeSortType(gw.mergeSort, "1,5,19,20,2,11,15,17");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '10-3') {
    $("#e-lecture").html("slide " + slide + " (" + 37 + "%)");
    $('#title-Merge').click();
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '10-4') {
    $("#e-lecture").html("slide " + slide + " (" + 39 + "%)");
    $('#title-Merge').click();
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '10-5') {
    $("#e-lecture").html("slide " + slide + " (" + 40 + "%)");
    $('#title-Merge').click();
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '10-6') {
    $("#e-lecture").html("slide " + slide + " (" + 42 + "%)");
    $('#title-Merge').click();
changeSortType(gw.mergeSort, "7,2,6,3,8,4,5");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '10-7') {
    $("#e-lecture").html("slide " + slide + " (" + 43 + "%)");
    $('#title-Merge').click();
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '10-8') {
    $("#e-lecture").html("slide " + slide + " (" + 44 + "%)");
    $('#title-Merge').click();
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '10-9') {
    $("#e-lecture").html("slide " + slide + " (" + 46 + "%)");
    $('#title-Merge').click();
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '10-10') {
    $("#e-lecture").html("slide " + slide + " (" + 47 + "%)");
    
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '11') {
    $("#e-lecture").html("slide " + slide + " (" + 49 + "%)");
    $('#title-Quick').click();
changeSortType(gw.quickSort, "27,38,12,39,27,16");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '11-1') {
    $("#e-lecture").html("slide " + slide + " (" + 50 + "%)");
    $('#title-Quick').click();
changeSortType(gw.quickSort, "27,38,12,39,27,16");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '11-2') {
    $("#e-lecture").html("slide " + slide + " (" + 52 + "%)");
    $('#title-Quick').click();
changeSortType(gw.quickSort, "27,38,12,39,27,16");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '11-3') {
    $("#e-lecture").html("slide " + slide + " (" + 53 + "%)");
    $('#title-Quick').click();
changeSortType(gw.quickSort, "27,38,12,39,27,16");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '11-4') {
    $("#e-lecture").html("slide " + slide + " (" + 55 + "%)");
    $('#title-Quick').click();
changeSortType(gw.quickSort, "27,38,12,39,27,16");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '11-5') {
    $("#e-lecture").html("slide " + slide + " (" + 56 + "%)");
    $('#title-Quick').click();
changeSortType(gw.quickSort, "27,38,12,39,27,16");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '11-6') {
    $("#e-lecture").html("slide " + slide + " (" + 57 + "%)");
    $('#title-Quick').click();
changeSortType(gw.quickSort, "27,38,12,39,27,16");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '11-7') {
    $("#e-lecture").html("slide " + slide + " (" + 59 + "%)");
    $('#title-Quick').click();
changeSortType(gw.quickSort, "27,38,12,39,27,16");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '11-8') {
    $("#e-lecture").html("slide " + slide + " (" + 60 + "%)");
    $('#title-Quick').click();
changeSortType(gw.quickSort, "27,38,12,39,27,16");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '11-9') {
    $("#e-lecture").html("slide " + slide + " (" + 62 + "%)");
    $('#title-Quick').click();
changeSortType(gw.quickSort, "27,38,12,39,27,16");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '11-10') {
    $("#e-lecture").html("slide " + slide + " (" + 63 + "%)");
    $('#title-Quick').click();

    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '11-11') {
    $("#e-lecture").html("slide " + slide + " (" + 65 + "%)");
    $('#title-Quick').click();
changeSortType(gw.quickSort, "5,18,23,39,44,50");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '11-12') {
    $("#e-lecture").html("slide " + slide + " (" + 66 + "%)");
    $('#title-Quick').click();
changeSortType(gw.quickSort, "5,18,23,39,44,50");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '11-13') {
    $("#e-lecture").html("slide " + slide + " (" + 68 + "%)");
    $('#title-Quick').click();
changeSortType(gw.quickSort, "4,1,3,2,6,5,7");
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '12') {
    $("#e-lecture").html("slide " + slide + " (" + 69 + "%)");
    $('#title-RandomizedQuick').click();
changeSortType(gw.randomizedQuickSort, DEFAULT_DATA);
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '12-1') {
    $("#e-lecture").html("slide " + slide + " (" + 71 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '13') {
    $("#e-lecture").html("slide " + slide + " (" + 72 + "%)");
    $('#title-Counting').click();

    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '13-1') {
    $("#e-lecture").html("slide " + slide + " (" + 73 + "%)");
    $('#title-Counting').click();

    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '14') {
    $("#e-lecture").html("slide " + slide + " (" + 75 + "%)");
    $('#title-Counting').click();
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '15') {
    $("#e-lecture").html("slide " + slide + " (" + 76 + "%)");
    $('#title-Radix').click();
    showActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '16') {
    $("#e-lecture").html("slide " + slide + " (" + 78 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '16-1') {
    $("#e-lecture").html("slide " + slide + " (" + 79 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '16-2') {
    $("#e-lecture").html("slide " + slide + " (" + 81 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '16-3') {
    $("#e-lecture").html("slide " + slide + " (" + 82 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '17') {
    $("#e-lecture").html("slide " + slide + " (" + 84 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '17-1') {
    $("#e-lecture").html("slide " + slide + " (" + 85 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '17-2') {
    $("#e-lecture").html("slide " + slide + " (" + 86 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '18') {
    $("#e-lecture").html("slide " + slide + " (" + 88 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '18-1') {
    $("#e-lecture").html("slide " + slide + " (" + 89 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '18-2') {
    $("#e-lecture").html("slide " + slide + " (" + 91 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '18-3') {
    $("#e-lecture").html("slide " + slide + " (" + 92 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '18-4') {
    $("#e-lecture").html("slide " + slide + " (" + 94 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '99') {
    $("#e-lecture").html("slide " + slide + " (" + 95 + "%)");
    
    hideEntireActionsPanel();
 
    showStatusPanel();
    showCodetracePanel();

  }
  if (slide == '99-1') {
    $("#e-lecture").html("slide " + slide + " (" + 97 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '99-2') {
    $("#e-lecture").html("slide " + slide + " (" + 98 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
  if (slide == '99-3') {
    $("#e-lecture").html("slide " + slide + " (" + 100 + "%)");
    
    hideEntireActionsPanel();
    hideStatusPanel();
    hideCodetracePanel();

  }
}

window.onpopstate = function(event) {
  var slide = event.state['slide'];
  openSlide(slide, function() {
    runSlide(slide);
  });
};

function getUrlParameter(sParam) {
  var sPageURL = decodeURIComponent(window.location.search.substring(1)),
  sURLVariables = sPageURL.split('&'), sParameterName, i;

  for (i = 0; i < sURLVariables.length; i++) {
    sParameterName = sURLVariables[i].split('=');
    if (sParameterName[0] === sParam) return sParameterName[1] === undefined ? true : sParameterName[1];
  }
};

function pushState(slideValue) {
  var url = '/en/sorting';
  if (typeof slideValue != 'undefined' && slideValue != null) url += '?slide=' + slideValue;
  window.history.pushState({slide: slideValue}, "slide " + slideValue, url);
}

function showPopup(callback) {
  $('#popup').fadeIn(100, callback);
}

function hidePopup(callback) {
  $('#popup').fadeOut(100, callback);
}

function showOverlay() {
  $('#overlay').css('opacity', 0.5); 
  $('#overlay').show();
}

function hideOverlay() {
  $('#overlay').hide();
  $("#e-lecture").html("");
}

function makeOverlayTransparent() {
  $('#overlay').css('opacity', 0);
}

function hideSlide(callback) {
  isPlaying = true;
  closeSlide(cur_slide, function() {
    makeOverlayTransparent();
    setTimeout(callback, 700); // don't immediately run the animation, wait for 500ms+ first
  });
}

function showSlide() {
  isPlaying = false;
  openSlide(cur_slide);
  showOverlay();
}

$(function() {
  var slide = getUrlParameter('slide');
  
  $.get('/hasvisited' + '/sorting', function(data) {
    var hasVisited = data['hasvisited'] == '1';
    if (!hasVisited) {
      var postData = {
        '_token': '9o458iMpLZ9PZFB95aeIab5ABq1bIgc8PEa9PoqA',
        'page': '/sorting'.substring(1),
      };

      $.post("/visitpage", postData, function(data) {
        // non critical request...
      });

      if (typeof slide != undefined && slide != null) {
        cur_slide = slide;
      }

      $("#mode-menu a").trigger("click");
    }
    else {
      if (typeof slide != undefined && slide != null) {
        cur_slide = slide;
        $('#mode-menu a').click();
      }    
    }
  }).fail(function() {
    if (typeof slide != undefined && slide != null) {
      cur_slide = slide;
      $('#mode-menu a').click();
    }
  });

  $('.mcq-submit').click(function() {
    var questionId = parseInt($(this).attr('id').split('-')[1]);
    var answer = $('#mcq-answer-' + questionId).val();
    var userAnswer = $('input[type=radio][name=mcq-'+questionId+'-choice]:checked').val();

    if (answer === userAnswer) {
      $('#answer-status-' + questionId).html('<font color="green"><b>Correct!</b></font>');
    }
    else {
      $('#answer-status-' + questionId).html('<font color="red"><b>Wrong Answer! Try again...</b></font>');
    }
    $('#answer-status-' + questionId).show();
    setTimeout(function() {
      $('#answer-status-' + questionId).fadeOut(1000);
    }, 1000);
  });

  $('.msq-submit').click(function() {
    var questionId = parseInt($(this).attr('id').split('-')[1]);
    var answer = $('#msq-answer-' + questionId).val();

    var answers = [];
    $('input[type=checkbox][class=msq-choice]:checked').each(function() {
      answers.push($(this).attr('id').split('-')[3]);
    });
    answers.sort();
    var userAnswer = answers.join(',');

    if (answer === userAnswer) {
      $('#answer-status-' + questionId).html('<font color="green">Correct!</font>');
    }
    else {
      $('#answer-status-' + questionId).html('<font color="red">Wrong Answer! Try again...</font>');
    }
    $('#answer-status-' + questionId).show();
    setTimeout(function() {
      $('#answer-status-' + questionId).fadeOut(1000);
    }, 1000);
  });

  $('select.lecture-dropdown').change(function() {
    var nextSlide = $(this).val();
    openSlide(nextSlide, function() {
      runSlide(nextSlide);
      pushState(nextSlide);
    });
  });

  $('#hide-popup').click(function() {
    hidePopup();
  });

  $('#popup').hover(function() {
    $('#hide-popup').show();
  }, function() {
    $('#hide-popup').hide();
  });

  $('#electure-1 .electure-next').click(function() {
    hidePopup();
    runSlide('1-1');
    pushState('1-1');
  });

  $('#electure-1-1 .electure-next').click(function() {
    hidePopup();
    runSlide('1-2');
    pushState('1-2');
  });
  $('#electure-1-1 .electure-prev').click(function() {
    hidePopup();
    runSlide('1');
    pushState('1');
  });

  $('#electure-1-2 .electure-next').click(function() {
    hidePopup();
    runSlide('2');
    pushState('2');
  });
  $('#electure-1-2 .electure-prev').click(function() {
    hidePopup();
    runSlide('1-1');
    pushState('1-1');
  });

  $('#electure-2 .electure-next').click(function() {
    hidePopup();
    runSlide('2-1');
    pushState('2-1');
  });
  $('#electure-2 .electure-prev').click(function() {
    hidePopup();
    runSlide('1-2');
    pushState('1-2');
  });

  $('#electure-2-1 .electure-next').click(function() {
    hidePopup();
    runSlide('2-2');
    pushState('2-2');
  });
  $('#electure-2-1 .electure-prev').click(function() {
    hidePopup();
    runSlide('2');
    pushState('2');
  });

  $('#electure-2-2 .electure-next').click(function() {
    hidePopup();
    runSlide('3');
    pushState('3');
  });
  $('#electure-2-2 .electure-prev').click(function() {
    hidePopup();
    runSlide('2-1');
    pushState('2-1');
  });

  $('#electure-3 .electure-next').click(function() {
    hidePopup();
    runSlide('4');
    pushState('4');
  });
  $('#electure-3 .electure-prev').click(function() {
    hidePopup();
    runSlide('2-2');
    pushState('2-2');
  });

  $('#electure-4 .electure-next').click(function() {
    hidePopup();
    runSlide('4-1');
    pushState('4-1');
  });
  $('#electure-4 .electure-prev').click(function() {
    hidePopup();
    runSlide('3');
    pushState('3');
  });

  $('#electure-4-1 .electure-next').click(function() {
    hidePopup();
    runSlide('5');
    pushState('5');
  });
  $('#electure-4-1 .electure-prev').click(function() {
    hidePopup();
    runSlide('4');
    pushState('4');
  });

  $('#electure-5 .electure-next').click(function() {
    hidePopup();
    runSlide('6');
    pushState('6');
  });
  $('#electure-5 .electure-prev').click(function() {
    hidePopup();
    runSlide('4-1');
    pushState('4-1');
  });

  $('#electure-6 .electure-next').click(function() {
    hidePopup();
    runSlide('6-1');
    pushState('6-1');
  });
  $('#electure-6 .electure-prev').click(function() {
    hidePopup();
    runSlide('5');
    pushState('5');
  });

  $('#electure-6-1 .electure-next').click(function() {
    hidePopup();
    runSlide('6-2');
    pushState('6-2');
  });
  $('#electure-6-1 .electure-prev').click(function() {
    hidePopup();
    runSlide('6');
    pushState('6');
  });

  $('#electure-6-2 .electure-next').click(function() {
    hidePopup();
    runSlide('6-3');
    pushState('6-3');
  });
  $('#electure-6-2 .electure-prev').click(function() {
    hidePopup();
    runSlide('6-1');
    pushState('6-1');
  });

  $('#electure-6-3 .electure-next').click(function() {
    hidePopup();
    runSlide('7');
    pushState('7');
  });
  $('#electure-6-3 .electure-prev').click(function() {
    hidePopup();
    runSlide('6-2');
    pushState('6-2');
  });

  $('#electure-7 .electure-next').click(function() {
    hidePopup();
    runSlide('7-1');
    pushState('7-1');
  });
  $('#electure-7 .electure-prev').click(function() {
    hidePopup();
    runSlide('6-3');
    pushState('6-3');
  });

  $('#electure-7-1 .electure-next').click(function() {
    hidePopup();
    runSlide('7-2');
    pushState('7-2');
  });
  $('#electure-7-1 .electure-prev').click(function() {
    hidePopup();
    runSlide('7');
    pushState('7');
  });

  $('#electure-7-2 .electure-next').click(function() {
    hidePopup();
    runSlide('8');
    pushState('8');
  });
  $('#electure-7-2 .electure-prev').click(function() {
    hidePopup();
    runSlide('7-1');
    pushState('7-1');
  });

  $('#electure-8 .electure-next').click(function() {
    hidePopup();
    runSlide('8-1');
    pushState('8-1');
  });
  $('#electure-8 .electure-prev').click(function() {
    hidePopup();
    runSlide('7-2');
    pushState('7-2');
  });

  $('#electure-8-1 .electure-next').click(function() {
    hidePopup();
    runSlide('8-2');
    pushState('8-2');
  });
  $('#electure-8-1 .electure-prev').click(function() {
    hidePopup();
    runSlide('8');
    pushState('8');
  });

  $('#electure-8-2 .electure-next').click(function() {
    hidePopup();
    runSlide('8-3');
    pushState('8-3');
  });
  $('#electure-8-2 .electure-prev').click(function() {
    hidePopup();
    runSlide('8-1');
    pushState('8-1');
  });

  $('#electure-8-3 .electure-next').click(function() {
    hidePopup();
    runSlide('9');
    pushState('9');
  });
  $('#electure-8-3 .electure-prev').click(function() {
    hidePopup();
    runSlide('8-2');
    pushState('8-2');
  });

  $('#electure-9 .electure-next').click(function() {
    hidePopup();
    runSlide('10');
    pushState('10');
  });
  $('#electure-9 .electure-prev').click(function() {
    hidePopup();
    runSlide('8-3');
    pushState('8-3');
  });

  $('#electure-10 .electure-next').click(function() {
    hidePopup();
    runSlide('10-1');
    pushState('10-1');
  });
  $('#electure-10 .electure-prev').click(function() {
    hidePopup();
    runSlide('9');
    pushState('9');
  });

  $('#electure-10-1 .electure-next').click(function() {
    hidePopup();
    runSlide('10-2');
    pushState('10-2');
  });
  $('#electure-10-1 .electure-prev').click(function() {
    hidePopup();
    runSlide('10');
    pushState('10');
  });

  $('#electure-10-2 .electure-next').click(function() {
    hidePopup();
    runSlide('10-3');
    pushState('10-3');
  });
  $('#electure-10-2 .electure-prev').click(function() {
    hidePopup();
    runSlide('10-1');
    pushState('10-1');
  });

  $('#electure-10-3 .electure-next').click(function() {
    hidePopup();
    runSlide('10-4');
    pushState('10-4');
  });
  $('#electure-10-3 .electure-prev').click(function() {
    hidePopup();
    runSlide('10-2');
    pushState('10-2');
  });

  $('#electure-10-4 .electure-next').click(function() {
    hidePopup();
    runSlide('10-5');
    pushState('10-5');
  });
  $('#electure-10-4 .electure-prev').click(function() {
    hidePopup();
    runSlide('10-3');
    pushState('10-3');
  });

  $('#electure-10-5 .electure-next').click(function() {
    hidePopup();
    runSlide('10-6');
    pushState('10-6');
  });
  $('#electure-10-5 .electure-prev').click(function() {
    hidePopup();
    runSlide('10-4');
    pushState('10-4');
  });

  $('#electure-10-6 .electure-next').click(function() {
    hidePopup();
    runSlide('10-7');
    pushState('10-7');
  });
  $('#electure-10-6 .electure-prev').click(function() {
    hidePopup();
    runSlide('10-5');
    pushState('10-5');
  });

  $('#electure-10-7 .electure-next').click(function() {
    hidePopup();
    runSlide('10-8');
    pushState('10-8');
  });
  $('#electure-10-7 .electure-prev').click(function() {
    hidePopup();
    runSlide('10-6');
    pushState('10-6');
  });

  $('#electure-10-8 .electure-next').click(function() {
    hidePopup();
    runSlide('10-9');
    pushState('10-9');
  });
  $('#electure-10-8 .electure-prev').click(function() {
    hidePopup();
    runSlide('10-7');
    pushState('10-7');
  });

  $('#electure-10-9 .electure-next').click(function() {
    hidePopup();
    runSlide('10-10');
    pushState('10-10');
  });
  $('#electure-10-9 .electure-prev').click(function() {
    hidePopup();
    runSlide('10-8');
    pushState('10-8');
  });

  $('#electure-10-10 .electure-next').click(function() {
    hidePopup();
    runSlide('11');
    pushState('11');
  });
  $('#electure-10-10 .electure-prev').click(function() {
    hidePopup();
    runSlide('10-9');
    pushState('10-9');
  });

  $('#electure-11 .electure-next').click(function() {
    hidePopup();
    runSlide('11-1');
    pushState('11-1');
  });
  $('#electure-11 .electure-prev').click(function() {
    hidePopup();
    runSlide('10-10');
    pushState('10-10');
  });

  $('#electure-11-1 .electure-next').click(function() {
    hidePopup();
    runSlide('11-2');
    pushState('11-2');
  });
  $('#electure-11-1 .electure-prev').click(function() {
    hidePopup();
    runSlide('11');
    pushState('11');
  });

  $('#electure-11-2 .electure-next').click(function() {
    hidePopup();
    runSlide('11-3');
    pushState('11-3');
  });
  $('#electure-11-2 .electure-prev').click(function() {
    hidePopup();
    runSlide('11-1');
    pushState('11-1');
  });

  $('#electure-11-3 .electure-next').click(function() {
    hidePopup();
    runSlide('11-4');
    pushState('11-4');
  });
  $('#electure-11-3 .electure-prev').click(function() {
    hidePopup();
    runSlide('11-2');
    pushState('11-2');
  });

  $('#electure-11-4 .electure-next').click(function() {
    hidePopup();
    runSlide('11-5');
    pushState('11-5');
  });
  $('#electure-11-4 .electure-prev').click(function() {
    hidePopup();
    runSlide('11-3');
    pushState('11-3');
  });

  $('#electure-11-5 .electure-next').click(function() {
    hidePopup();
    runSlide('11-6');
    pushState('11-6');
  });
  $('#electure-11-5 .electure-prev').click(function() {
    hidePopup();
    runSlide('11-4');
    pushState('11-4');
  });

  $('#electure-11-6 .electure-next').click(function() {
    hidePopup();
    runSlide('11-7');
    pushState('11-7');
  });
  $('#electure-11-6 .electure-prev').click(function() {
    hidePopup();
    runSlide('11-5');
    pushState('11-5');
  });

  $('#electure-11-7 .electure-next').click(function() {
    hidePopup();
    runSlide('11-8');
    pushState('11-8');
  });
  $('#electure-11-7 .electure-prev').click(function() {
    hidePopup();
    runSlide('11-6');
    pushState('11-6');
  });

  $('#electure-11-8 .electure-next').click(function() {
    hidePopup();
    runSlide('11-9');
    pushState('11-9');
  });
  $('#electure-11-8 .electure-prev').click(function() {
    hidePopup();
    runSlide('11-7');
    pushState('11-7');
  });

  $('#electure-11-9 .electure-next').click(function() {
    hidePopup();
    runSlide('11-10');
    pushState('11-10');
  });
  $('#electure-11-9 .electure-prev').click(function() {
    hidePopup();
    runSlide('11-8');
    pushState('11-8');
  });

  $('#electure-11-10 .electure-next').click(function() {
    hidePopup();
    runSlide('11-11');
    pushState('11-11');
  });
  $('#electure-11-10 .electure-prev').click(function() {
    hidePopup();
    runSlide('11-9');
    pushState('11-9');
  });

  $('#electure-11-11 .electure-next').click(function() {
    hidePopup();
    runSlide('11-12');
    pushState('11-12');
  });
  $('#electure-11-11 .electure-prev').click(function() {
    hidePopup();
    runSlide('11-10');
    pushState('11-10');
  });

  $('#electure-11-12 .electure-next').click(function() {
    hidePopup();
    runSlide('11-13');
    pushState('11-13');
  });
  $('#electure-11-12 .electure-prev').click(function() {
    hidePopup();
    runSlide('11-11');
    pushState('11-11');
  });

  $('#electure-11-13 .electure-next').click(function() {
    hidePopup();
    runSlide('12');
    pushState('12');
  });
  $('#electure-11-13 .electure-prev').click(function() {
    hidePopup();
    runSlide('11-12');
    pushState('11-12');
  });

  $('#electure-12 .electure-next').click(function() {
    hidePopup();
    runSlide('12-1');
    pushState('12-1');
  });
  $('#electure-12 .electure-prev').click(function() {
    hidePopup();
    runSlide('11-13');
    pushState('11-13');
  });

  $('#electure-12-1 .electure-next').click(function() {
    hidePopup();
    runSlide('13');
    pushState('13');
  });
  $('#electure-12-1 .electure-prev').click(function() {
    hidePopup();
    runSlide('12');
    pushState('12');
  });

  $('#electure-13 .electure-next').click(function() {
    hidePopup();
    runSlide('13-1');
    pushState('13-1');
  });
  $('#electure-13 .electure-prev').click(function() {
    hidePopup();
    runSlide('12-1');
    pushState('12-1');
  });

  $('#electure-13-1 .electure-next').click(function() {
    hidePopup();
    runSlide('14');
    pushState('14');
  });
  $('#electure-13-1 .electure-prev').click(function() {
    hidePopup();
    runSlide('13');
    pushState('13');
  });

  $('#electure-14 .electure-next').click(function() {
    hidePopup();
    runSlide('15');
    pushState('15');
  });
  $('#electure-14 .electure-prev').click(function() {
    hidePopup();
    runSlide('13-1');
    pushState('13-1');
  });

  $('#electure-15 .electure-next').click(function() {
    hidePopup();
    runSlide('16');
    pushState('16');
  });
  $('#electure-15 .electure-prev').click(function() {
    hidePopup();
    runSlide('14');
    pushState('14');
  });

  $('#electure-16 .electure-next').click(function() {
    hidePopup();
    runSlide('16-1');
    pushState('16-1');
  });
  $('#electure-16 .electure-prev').click(function() {
    hidePopup();
    runSlide('15');
    pushState('15');
  });

  $('#electure-16-1 .electure-next').click(function() {
    hidePopup();
    runSlide('16-2');
    pushState('16-2');
  });
  $('#electure-16-1 .electure-prev').click(function() {
    hidePopup();
    runSlide('16');
    pushState('16');
  });

  $('#electure-16-2 .electure-next').click(function() {
    hidePopup();
    runSlide('16-3');
    pushState('16-3');
  });
  $('#electure-16-2 .electure-prev').click(function() {
    hidePopup();
    runSlide('16-1');
    pushState('16-1');
  });

  $('#electure-16-3 .electure-next').click(function() {
    hidePopup();
    runSlide('17');
    pushState('17');
  });
  $('#electure-16-3 .electure-prev').click(function() {
    hidePopup();
    runSlide('16-2');
    pushState('16-2');
  });

  $('#electure-17 .electure-next').click(function() {
    hidePopup();
    runSlide('17-1');
    pushState('17-1');
  });
  $('#electure-17 .electure-prev').click(function() {
    hidePopup();
    runSlide('16-3');
    pushState('16-3');
  });

  $('#electure-17-1 .electure-next').click(function() {
    hidePopup();
    runSlide('17-2');
    pushState('17-2');
  });
  $('#electure-17-1 .electure-prev').click(function() {
    hidePopup();
    runSlide('17');
    pushState('17');
  });

  $('#electure-17-2 .electure-next').click(function() {
    hidePopup();
    runSlide('18');
    pushState('18');
  });
  $('#electure-17-2 .electure-prev').click(function() {
    hidePopup();
    runSlide('17-1');
    pushState('17-1');
  });

  $('#electure-18 .electure-next').click(function() {
    hidePopup();
    runSlide('18-1');
    pushState('18-1');
  });
  $('#electure-18 .electure-prev').click(function() {
    hidePopup();
    runSlide('17-2');
    pushState('17-2');
  });

  $('#electure-18-1 .electure-next').click(function() {
    hidePopup();
    runSlide('18-2');
    pushState('18-2');
  });
  $('#electure-18-1 .electure-prev').click(function() {
    hidePopup();
    runSlide('18');
    pushState('18');
  });

  $('#electure-18-2 .electure-next').click(function() {
    hidePopup();
    runSlide('18-3');
    pushState('18-3');
  });
  $('#electure-18-2 .electure-prev').click(function() {
    hidePopup();
    runSlide('18-1');
    pushState('18-1');
  });

  $('#electure-18-3 .electure-next').click(function() {
    hidePopup();
    runSlide('18-4');
    pushState('18-4');
  });
  $('#electure-18-3 .electure-prev').click(function() {
    hidePopup();
    runSlide('18-2');
    pushState('18-2');
  });

  $('#electure-18-4 .electure-next').click(function() {
    hidePopup();
    runSlide('99');
    pushState('99');
  });
  $('#electure-18-4 .electure-prev').click(function() {
    hidePopup();
    runSlide('18-3');
    pushState('18-3');
  });

  $('#electure-99 .electure-next').click(function() {
    hidePopup();
    runSlide('99-1');
    pushState('99-1');
  });
  $('#electure-99 .electure-prev').click(function() {
    hidePopup();
    runSlide('18-4');
    pushState('18-4');
  });

  $('#electure-99-1 .electure-next').click(function() {
    hidePopup();
    runSlide('99-2');
    pushState('99-2');
  });
  $('#electure-99-1 .electure-prev').click(function() {
    hidePopup();
    runSlide('99');
    pushState('99');
  });

  $('#electure-99-2 .electure-next').click(function() {
    hidePopup();
    runSlide('99-3');
    pushState('99-3');
  });
  $('#electure-99-2 .electure-prev').click(function() {
    hidePopup();
    runSlide('99-1');
    pushState('99-1');
  });

  $('#electure-99-3 .electure-prev').click(function() {
    hidePopup();
    runSlide('99-2');
    pushState('99-2');
  });

 

  // temporary quick fix for Google Chrome Aug 2016 issue..., put at last part so that everything else has been loaded
  setTimeout(function(){ document.body.style.zoom = "100.1%"; }, 500);
  setTimeout(function(){ document.body.style.zoom = "100%"; }, 600);
});

function doButtonAction7() {
  POPUP_IMAGE('https://open.kattis.com/images/site-logo');
}
function doButtonAction8() {
  SORT();
}
function doButtonAction10() {
  SORT();
}
function doButtonAction11() {
  SORT();
}
function doButtonAction12() {
  SORT();
}
function doButtonAction13() {
  SORT();
}
function doButtonAction14() {
  SORT();
}
function doButtonAction15() {
  SORT();
}
function doButtonAction16() {
  SORT();
}
function doButtonAction17() {
  URL('training?diff=Hard&n=10&tl=5&module=sorting');
}
function doButtonAction18() {
  POPUP_IMAGE('https://pbs.twimg.com/profile_images/2618373647/image.jpg');
}
function doButtonAction19() {
  URL('login');
}
function doButtonAction20() {
  POPUP_IMAGE('https://puu.sh/vfi6a/e532309371.png');
}
function doButtonAction33() {
  changeSortType(gw.bubbleSort, "7,6,5,4,3,2,1");
SORT();
}
function doButtonAction95() {
  // add your code here
}

function adjustPopupToImageSize() {
  var width = $('#popup-image').prop('width');
  var height = $('#popup-image').prop('height');
  $('#popup').width(width + 20);
  $('#popup').height(height + 20);
  if (width == 0 && height == 0) {
    setTimeout(adjustPopupToImageSize, 200);
  } else {
    showPopup();  
  }
}

function POPUP_IMAGE(url) {
  $('#popup-content').html('<img id="popup-image" src="https://visualgo.net/en/'%20+%20url%20+%20'">');
  adjustPopupToImageSize();
}

function URL(url) {
  window.open(url, '_blank');
}
</script>

<script> // Implement these functions in each visualisation
  // This function will be called before entering e-Lecture Mode
  function ENTER_LECTURE_MODE() {}

  // This function will be called before returning to Explore Mode
  function ENTER_EXPLORE_MODE() {}

  // Lecture action functions
  function CUSTOM_ACTION(action, data, mode) {}
</script>

<script type="text/javascript">
// Sorting Widget
// original author: Ian Leow Tze Wei

var Sorting = function() {
  // constants
  var HIGHLIGHT_NONE = "lightblue";
  var HIGHLIGHT_STANDARD = "green";
  var HIGHLIGHT_SPECIAL = "#DC143C";
  var HIGHLIGHT_SORTED = "orange";

  var HIGHLIGHT_LEFT = "#3CB371";
  var HIGHLIGHT_RIGHT = "#9932CC";
  var HIGHLIGHT_PIVOT = "yellow";

  var HIGHLIGHT_GRAY = "#CCCCCC";

  var HIGHLIGHT_RAINBOW = [
    "#FF0000",
    "#FF4000",
    "#FF8000",
    "#FFBF00",
    "#FFFF00",
    "#BFFF00",
    "#80FF00",
    "#40FF00",
    //"#00FF00",
    "#00FF40",
    "#00FF80",
    "#00FFBF",
    "#00FFFF",
    "#00BFFF",
    "#0080FF",
    "#0040FF",
    "#0000FF",
    "#4000FF",
    "#8000FF",
    "#BF00FF",
    "#FF00FF"
  ];

  var HIGHLIGHT_BLUESHADES = [
    HIGHLIGHT_GRAY,
    HIGHLIGHT_NONE,
    "#9DC4E8",
    "#8EB1EB",
    "#7E9DED",
    "#6E89EF",
    "#5E76F1",
    "#4F62F4",
    "#3F4FF6",
    "#2F3BF8",
    "#1F27FA",
    "#1014FD",
    "#0000FF",
    "#0000FF",
    "#0000FF",
    "#0000FF",
    "#0000FF",
    "#0000FF",
    "#0000FF",
    "#0000FF",
    "#0000FF"
  ];

  var POSITION_USE_PRIMARY = "a";
  var POSITION_USE_SECONDARY_IN_DEFAULT_POSITION = "b";

  // Objects definition
  var Entry = function(value, highlight, position, secondaryPositionStatus) {
    this.value = value; // number
    this.highlight = highlight; // string, use HIGHLIGHT_ constants
    this.position = position; // number
    this.secondaryPositionStatus = secondaryPositionStatus; // integer, +ve for position overwrite, -ve for absolute postion (-1 for 0th absolution position)
  }

  var Backlink = function(value, highlight, entryPosition, secondaryPositionStatus) {
    this.value = value; // number
    this.highlight = highlight; // string, use HIGHLIGHT_ constants
    this.entryPosition = entryPosition; // number
    this.secondaryPositionStatus = secondaryPositionStatus; // integer, +ve for position overwrite
  }

  var State = function(entries, backlinks, barsCountOffset, status, lineNo) {
    this.entries = entries; // array of Entry's
    this.backlinks = backlinks; // array of Backlink's
    this.barsCountOffset = barsCountOffset; // how many bars to "disregard" (+ve) or to "imagine" (-ve) w.r.t. state.entries.length when calculating the centre position
    this.status = status;
    this.lineNo = lineNo; //integer or array, line of the code to highlight
  }

  //Helpers
  var EntryBacklinkHelper = new Object();
  EntryBacklinkHelper.appendList = function(entries, backlinks, numArray) {
    for (var i = 0; i < numArray.length; i++) {
      EntryBacklinkHelper.append(entries, backlinks, numArray[i]);
    }
  }

  EntryBacklinkHelper.append = function(entries, backlinks, newNumber) {
    entries.push(new Entry(newNumber, HIGHLIGHT_NONE, entries.length, POSITION_USE_PRIMARY));
    backlinks.push(new Backlink(newNumber, HIGHLIGHT_NONE, backlinks.length, POSITION_USE_PRIMARY));
  }

  EntryBacklinkHelper.update = function(entries, backlinks) {
    for (var i = 0; i < backlinks.length; i++) {
      entries[backlinks[i].entryPosition].highlight = backlinks[i].highlight;
      entries[backlinks[i].entryPosition].position = i;
      entries[backlinks[i].entryPosition].secondaryPositionStatus = backlinks[i].secondaryPositionStatus;
    }
  }

  EntryBacklinkHelper.copyEntry = function(oldEntry) {
    return new Entry(oldEntry.value, oldEntry.highlight, oldEntry.position, oldEntry.secondaryPositionStatus);
  }

  EntryBacklinkHelper.copyBacklink = function(oldBacklink) {
    return new Backlink(oldBacklink.value, oldBacklink.highlight, oldBacklink.entryPosition, oldBacklink.secondaryPositionStatus);
  }

  EntryBacklinkHelper.swapBacklinks = function(backlinks, i, j) {
    var swaptemp = backlinks[i];
    backlinks[i] = backlinks[j];
    backlinks[j] = swaptemp;
  }

  var StateHelper = new Object();
  StateHelper.createNewState = function(numArray) {
    var entries = new Array();
    var backlinks = new Array();
    EntryBacklinkHelper.appendList(entries, backlinks, numArray);
    return new State(entries, backlinks, 0, "", 0);
  }

  StateHelper.copyState = function(oldState) {
    var newEntries = new Array();
    var newBacklinks = new Array();
    for (var i = 0; i < oldState.backlinks.length; i++) {
      newEntries.push(EntryBacklinkHelper.copyEntry(oldState.entries[i]));
      newBacklinks.push(EntryBacklinkHelper.copyBacklink(oldState.backlinks[i]));
    }

    var newLineNo = oldState.lineNo;
    if (newLineNo instanceof Array)
      newLineNo = oldState.lineNo.slice();

    return new State(newEntries, newBacklinks, oldState.barsCountOffset, oldState.status, newLineNo);
  }

  StateHelper.updateCopyPush = function(list, stateToPush) {
    EntryBacklinkHelper.update(stateToPush.entries, stateToPush.backlinks);
    list.push(StateHelper.copyState(stateToPush));
  }

  var FunctionList = new Object();
  FunctionList.text_y = function(d) {
    var barHeight = scaler(d.value);
    if (barHeight < 32) return -15;
    return barHeight-15;
  }

  FunctionList.g_transform = function(d) {
    if (d.secondaryPositionStatus == POSITION_USE_PRIMARY)
      return 'translate(' + (centreBarsOffset + d.position * barWidth) + ", " + (maxHeight - scaler(d.value)) + ')';
    else if (d.secondaryPositionStatus == POSITION_USE_SECONDARY_IN_DEFAULT_POSITION)
      return 'translate(' + (centreBarsOffset + d.position * barWidth) + ", " + (maxHeight * 2 + gapBetweenPrimaryAndSecondaryRows - scaler(d.value)) + ')';
    else if (d.secondaryPositionStatus >= 0)
      return 'translate(' + (centreBarsOffset + d.secondaryPositionStatus * barWidth) + ", " + (maxHeight * 2 + gapBetweenPrimaryAndSecondaryRows - scaler(d.value)) + ')';
    else if (d.secondaryPositionStatus < 0)
      return 'translate(' + ((d.secondaryPositionStatus * -1 - 1) * barWidth) + ", " + (maxHeight * 2 + gapBetweenPrimaryAndSecondaryRows - scaler(d.value)) + ')';
    else
      return 'translation(0, 0)'; // error
  }

    FunctionList.radixElement_left = function(d) {
      if (d.secondaryPositionStatus == POSITION_USE_PRIMARY)
        return d.position * 65 + centreBarsOffset + "px";
      return d.secondaryPositionStatus * 65 + 17.5 + "px";
    }

    FunctionList.radixElement_bottom = function(d, i) {
      if (d.secondaryPositionStatus == POSITION_USE_PRIMARY)
        return 500 - 24 + "px";
      //console.log(i + " " + radixSortBucketOrdering[i]);
      return radixSortBucketOrdering[i] * 30 + 5 + "px";
    }

  FunctionList.radixElement_html = function(d) {
    if (d.highlight == HIGHLIGHT_NONE)
      return d.value;

    var text = "" + d.value;
    while (text.length != 4)
      text = " " + text;

    var positionToHighlight = 0; //positionToHighlight = log_to_base_10(d.highlight), assumes d.highlight is power of 10
    var positionCounter = d.highlight;
    while (positionCounter != 1) {
      positionToHighlight++;
      positionCounter /= 10;
    }

    positionToHighlight = 3-positionToHighlight;

    if (text.charAt(positionToHighlight) != " ") {
      text = text.slice(0, positionToHighlight) +
             "<span style='color: #B40404;'>" +
             text.charAt(positionToHighlight) +
             "</span>" +
             text.slice(positionToHighlight+1);
    }

    text = text.trim();
    return text;
  }

  var makePaler = function(hexColor) {
    var red = Math.floor(parseInt(hexColor.slice(1, 3), 16) + 150);
    var green = Math.floor(parseInt(hexColor.slice(3, 5), 16) + 150);
    var blue = Math.floor(parseInt(hexColor.slice(5, 7), 16) + 150);

    if (red > 255) red = 255;
    if (green > 255) green = 255;
    if (blue > 255) blue = 255;

    red = red.toString(16);
    green = green.toString(16);
    blue = blue.toString(16);

    if (red.length == 1) red = "0" + red;
    if (green.length == 1) green = "0" + green;
    if (blue.length == 1) blue = "0" + blue;
    return "#" + red + green + blue;
  }

  // Variables/Settings
  this.currentNumList = [3,44,38,5,47,15,36,26,27,2,46,4,19,50,48]; // the default

  var barWidth = 50;
  var maxHeight = 230;
  var gapBetweenBars = 5;
  var maxNumOfElements = 20; //max 20 elements currently
  var gapBetweenPrimaryAndSecondaryRows = 30; // of the bars

  var maxCountingSortElementValue = 9; // Note that this isn't really customizable, as the code for counting sort is written with this value = 9 in mind.
  var maxRadixSortElementValue = 9999; // Note that this isn't really customizable, as the code for radix sort is written with this value = 9999 in mind.
  var maxElementValue = 50; // for all other sorts - this is fully customizable (seriously)

  var graphElementSize = 10; // The width of the square in the side-graph representing 1 element
  var graphElementGap = 2; // The width of the gap between each element in the side-graph
  var graphRowGap = 10; // The height of the gap between each row in the side graph

  //Code body
  var statelist = new Array();
  var secondaryStatelist = new Array();
  var transitionTime = 500;
  var currentStep = 0;
  var animInterval;
  var issPlaying; //so named so as not to mess with the isPlaying in viz.js

  var quickSortUseRandomizedPivot; //true-false flag
  var mergeSortInversionIndexCounter; //used by merge sort to count the inversion inde
  var centreBarsOffset; // x offset to centre the bars in the canvas
  var radixSortBucketOrdering; // used to order the elements inside each bucket (for radix sort). for formatting purposes.

  var isRadixSort = false;
  var isCountingSort = false;

  this.selectedSortFunction;
  // this.useEnhancedBubbleSort = false;
  this.computeInversionIndex = false;

  var canvas = d3.select("#viz-canvas")
                 .attr("height", maxHeight * 2 + gapBetweenPrimaryAndSecondaryRows)
                 .attr("width", barWidth * maxNumOfElements);

  var countingSortSecondaryCanvas = d3.select("#viz-counting-sort-secondary-canvas")
                                      .attr("height", 60)
                                      .attr("width", barWidth * maxNumOfElements);

  var radixSortCanvas = d3.select("#viz-radix-sort-canvas");

  var scaler = d3.scale
                 .linear()
                 .range([0, maxHeight]);

  var drawState = function(stateIndex) {
    if (isRadixSort)
      drawRadixSortCanvas(statelist[stateIndex], secondaryStatelist[stateIndex]);
    else
      drawBars(statelist[stateIndex]);

    $('#status p').html(statelist[stateIndex].status);
    highlightLine(statelist[stateIndex].lineNo);

    if (isCountingSort)
      drawCountingSortCounters(secondaryStatelist[stateIndex]);
  };

  var drawBars = function(state) {
    scaler.domain([0, d3.max(state.entries, function(d) {
      return d.value;
    })]);

    centreBarsOffset = (maxNumOfElements - (state.entries.length - state.barsCountOffset)) * barWidth / 2;

    var canvasData = canvas.selectAll("g").data(state.entries);

    // Exit ==============================
    var exitData = canvasData.exit()
                             .remove();

    // Entry ==============================
    var newData = canvasData.enter()
                            .append("g")
                            .attr("transform", FunctionList.g_transform);

    newData.append("rect")
           .attr("height", 0)
           .attr("width", 0);

    newData.append("text")
           .attr("dy", ".35em")
           .attr("x", (barWidth - gapBetweenBars) / 2)
           .attr("y", FunctionList.text_y)
           .text(function(d) {
             return d.value;
           });

    // Update ==============================
    canvasData.select("text")
              .transition()
              .attr("y", FunctionList.text_y)
              .text(function(d) {
                return d.value;
              });

    canvasData.select("rect")
              .transition()
              .attr("height", function(d) {
                return scaler(d.value);
              })
              .attr("width", barWidth - gapBetweenBars)
              .style("fill", function(d) {
                return d.highlight;
              });

    canvasData.transition()
              .attr("transform", FunctionList.g_transform)
  };

  var drawCountingSortCounters = function(state) {
    var canvasData;
    if (state == null)
      canvasData = countingSortSecondaryCanvas.selectAll("text").data([]);
    else
      canvasData = countingSortSecondaryCanvas.selectAll("text").data(state);

    // Exit ==============================
    var exitData = canvasData
            .exit()
            .remove();

    // Entry ==============================

    var newData = canvasData
            .enter()
            .append("text")
            .attr("dy", ".35em")
            .attr("x", function(d, i) {
              return (i + 5) * barWidth + (barWidth - gapBetweenBars) / 2;
            })
            .attr("y", 20)
            .text(function(d) {
              return d;
            });

    // Update ==============================

    canvasData
            .transition()
            .text(function(d) {
              return d;
            });
  };

  var drawRadixSortCanvas = function(state, secondaryState) {
    centreBarsOffset = (1000 - (state.entries.length * 65 - 10)) / 2; 

    var canvasData = radixSortCanvas.selectAll("div").data(state.entries);
    var radixSortBucketCount = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    radixSortBucketOrdering = new Array(state.backlinks.length);

    for (var i = 0; i < state.backlinks.length; i++) {
      if (state.backlinks.secondaryPositionStatus != POSITION_USE_PRIMARY)
        radixSortBucketOrdering[state.backlinks[i].entryPosition] = radixSortBucketCount[state.backlinks[i].secondaryPositionStatus]++;
    }

    // Handle the buckets' DIV's
    if (secondaryState)
      $("#radix-sort-bucket-labels-collection").show();
    else
      $("#radix-sort-bucket-labels-collection").hide();

    // Exit ==============================
    var exitData = canvasData.exit()
                             .remove();

    // Entry ==============================
    var newData = canvasData.enter()
                            .append("div")
                            .classed({"radix-sort-element": true})
                            .style({
                              "left": FunctionList.radixElement_left,
                              "bottom": FunctionList.radixElement_bottom
                            })
                            .html(FunctionList.radixElement_html);

    // Update ==============================
    canvasData.html(FunctionList.radixElement_html)
              .transition()
              .style({
                "left": FunctionList.radixElement_left,
                "bottom": FunctionList.radixElement_bottom
              });
  };

  var generateRandomNumberArray = function(size, limit) {
    var numArray = new Array();
    for (var i = 0; i < size; i++) {
      numArray.push(generateRandomNumber(1, limit));
    }
    return numArray;
  };

  var generateRandomNumber = function(min, max) { //generates a random integer between min and max (both inclusive)
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  var convertToNumber = function(num) {
    return +num;
  };

  this.createList = function(type) {
    var numArrayMaxListSize = 20;
    var numArrayMaxElementValue = maxElementValue;
    if (this.selectedSortFunction == this.radixSort) {
      numArrayMaxListSize = 15;
      numArrayMaxElementValue = maxRadixSortElementValue;
    }
    else if (this.selectedSortFunction == this.countingSort) {
      numArrayMaxElementValue = maxCountingSortElementValue;
    }

    var numArray = generateRandomNumberArray(generateRandomNumber(10, numArrayMaxListSize), numArrayMaxElementValue);

    switch (type) {
      case 'userdefined':
        numArray = $('#userdefined-input').val().split(",");

        if (numArray.length > numArrayMaxListSize) {
          $("#create-err").html('You can&#39;t have more than {maxSize} elements!'.replace("{maxSize}", numArrayMaxListSize));
          return false;
        }

        for (var i = 0; i < numArray.length; i++) {
          var temp = convertToNumber(numArray[i]);

          if (numArray[i].trim() == "") {
            $("#create-err").html('There seems to be a missing element (a duplicate comma somewhere perhaps?)');
            return false;
          }
          if (isNaN(temp)) {
            $("#create-err").html('There seems to be an invalid element (not a number): {num}.'.replace("{num}", numArray[i]));
            return false;
          }
          if (temp < 1 || temp > numArrayMaxElementValue) {
            $("#create-err").html('Sorry, you&#39;re restricted to values between 1 and {maxValue} inclusive. (Out of range number: {num}.)'.replace("{maxValue}", numArrayMaxElementValue).replace("{num}", numArray[i]));
            return false;
          }

          numArray[i] = convertToNumber(numArray[i]);
        }
        break;
      case 'random':
        break;
      case 'sorted-increasing':
      case 'nearly-sorted-increasing':
        numArray.sort(d3.ascending);
        break;
      case 'sorted-decreasing':
      case 'nearly-sorted-decreasing':
        numArray.sort(d3.descending);
        break;
    }

    if (type.indexOf("nearly") != -1) {
      // To make the list nearly sorted, we take the already sorted list and make swaps
      // such that the list becomes not sorted. The number of such swaps varies from 1 to 2 (customizable).
      // The idea is that the more swaps we make, the less "sorted" the list is.
      //
      // Another limitation is that each swap occurs between elements that are at most 3 positions away.
      while (true) {
        var newNumArray = numArray.slice();

        var numOfSwaps = generateRandomNumber(1, 2);
        for (var i = 0; i < numOfSwaps; i++) {
          var firstSwappingIndex = generateRandomNumber(0, newNumArray.length - 4);
          var secondSwappingIndex = generateRandomNumber(1, 3) + firstSwappingIndex;

          var temp = numArray[firstSwappingIndex];
          newNumArray[firstSwappingIndex] = numArray[secondSwappingIndex];
          newNumArray[secondSwappingIndex] = temp;
        }

        // We compare the numArray with newNumArray, if they're are the same,
        // we try again, else we reassign numArray to newNumArray and break.
        var isEquals = true;
        for (var i = 0; i < numArray.length; i++) {
          if (numArray[i] != newNumArray[i]) {
            isEquals = false;
            break;
          }
        }

        if (!isEquals) {
          numArray = newNumArray;
          break;
        }
      }
    }

    this.loadNumberList(numArray);      
  }

  this.loadNumberList = function(numArray) {
    $("#create-err").html("");

    issPlaying = false;
    currentStep = 0;
    this.currentNumList = numArray;

    //console.log("numArray: " + numArray);

    statelist = [StateHelper.createNewState(numArray)];
    secondaryStatelist = [null]; // the initial secondary state will be an empty state
    drawState(0);
  }

  this.setSelectedSortFunction = function(f) {
    this.selectedSortFunction = f;
    isRadixSort = (this.selectedSortFunction == this.radixSort);
    isCountingSort = (this.selectedSortFunction == this.countingSort);
  }

  this.sort = function(callback) {
    return this.selectedSortFunction(callback);
  }

  this.radixSort = function(callback) {
    var numElements = statelist[0].backlinks.length;
    var state = StateHelper.copyState(statelist[0]);

    populatePseudocode([
      'create 10 buckets (queues) for each digit (0 to 9)',
      'for each digit placing',
      '  for each element in list',
      '    move element into respective bucket',
      '  for each bucket, starting from smallest digit',
      '    while bucket is non-empty',
      '      restore element to list'
    ]);

    secondaryStatelist = [false]; // showBucket flag - if true, shows the DIV's representing the bucketss
    var currentPlacing = 1;
    var targetPlacing = 1;
    var backlinkBuckets = [[], [], [], [], [], [], [], [], [], []];

    var maxValue = d3.max(state.backlinks, function(d) {
      return d.value;
    });
    while (maxValue >= 10) {
      targetPlacing *= 10;
      maxValue = Math.floor(maxValue / 10);
    }

    for (; currentPlacing <= targetPlacing; currentPlacing *= 10) {
      for (var i = 0; i < numElements; i++)
        state.backlinks[i].highlight = currentPlacing;

      StateHelper.updateCopyPush(statelist, state);
      secondaryStatelist.push(true);

      for (var i = 0; i < numElements; i++) {
        var currentDigit = Math.floor(state.backlinks[i].value / currentPlacing) % 10;
        state.backlinks[i].secondaryPositionStatus = currentDigit;
        backlinkBuckets[currentDigit].push(state.backlinks[i]);
        StateHelper.updateCopyPush(statelist, state);
        secondaryStatelist.push(true);
      }

      for (var i = 0, j = 0; i <= 9; ) {
        if (backlinkBuckets[i].length == 0) {
          i++;
          continue;
        }

        state.backlinks[j++] = backlinkBuckets[i].shift();
      }

      for (var i = 0; i < numElements; i++) {
        state.backlinks[i].secondaryPositionStatus = POSITION_USE_PRIMARY;
        StateHelper.updateCopyPush(statelist, state);
        secondaryStatelist.push(true);
      }
    }

    for (var i = 0; i < numElements; i++)
      state.backlinks[i].highlight = HIGHLIGHT_NONE;
    StateHelper.updateCopyPush(statelist, state);
    secondaryStatelist.push(false);

    this.play(callback);
    return true;
  }

  this.countingSort = function(callback) {
    // Note that while we have the maxCountingSortElementValue variable, it isn't really customizable.
    // The code here written is really just for the range 1 to 9.

    var numElements = statelist[0].backlinks.length;
    var state = StateHelper.copyState(statelist[0]);

    populatePseudocode([
      'create key (counting) array',
      'for each element in list',
      '  increase the respective counter by 1',
      'for each counter, starting from smallest key',
      '  while counter is non-zero',
      '    restore element to list',
      '    decrease counter by 1'
    ]);

    var secondaryState = [0, 0, 0, 0, 0, 0, 0, 0, 0];
    var backlinkBuckets = [[], [], [], [], [], [], [], [], []];

    state.barsCountOffset = maxCountingSortElementValue;

    for (var i = 1; i <= maxCountingSortElementValue; i++) {
      EntryBacklinkHelper.append(state.entries, state.backlinks, i);
      state.backlinks[numElements + i - 1].highlight = HIGHLIGHT_GRAY;
      state.backlinks[numElements + i - 1].secondaryPositionStatus = i * -1 - 5;
    }

    state.lineNo = 1;
    state.status = 'Create the key (counting) array (from 1 to 9).';

    StateHelper.updateCopyPush(statelist, state);
    secondaryStatelist.push(secondaryState.slice()); // copy the array and push it into the secondary statelist

    for (var i = 0; i < numElements; i++) {
      var currentValue = state.backlinks[i].value;

      backlinkBuckets[currentValue-1].push(state.backlinks[i]);

      state.backlinks[i].secondaryPositionStatus = currentValue * -1 - 5;

      secondaryState[currentValue-1]++;

      state.backlinks[currentValue + numElements - 1].highlight = HIGHLIGHT_BLUESHADES[secondaryState[currentValue - 1]];

      state.lineNo = [2, 3];
      state.status = 'Increase the counter with key {curVal} by 1.'.replace("{curVal}", currentValue);

      StateHelper.updateCopyPush(statelist, state);
      secondaryStatelist.push(secondaryState.slice()); // copy the array and push it into the secondary statelist
    }

    for (var i = 0, j = 0; i < maxCountingSortElementValue; ) {
      if (backlinkBuckets[i].length == 0) {
        i++;
        continue;
      }

      state.backlinks[j++] = backlinkBuckets[i].shift();
    }

    for (var i = 0; i < numElements; i++) {
      var currentValue = state.backlinks[i].value;

      state.backlinks[i].secondaryPositionStatus = POSITION_USE_PRIMARY;

      secondaryState[currentValue - 1]--;

      state.backlinks[currentValue + numElements - 1].highlight = HIGHLIGHT_BLUESHADES[secondaryState[currentValue - 1]];

      state.lineNo = [4, 5, 6, 7];
      state.status = 'Restore element {curVal}, and decrease the counter with key {curVal} by 1.'.replace("{curVal}", currentValue);

      StateHelper.updateCopyPush(statelist, state);
      secondaryStatelist.push(secondaryState.slice()); //copy the array and push it into the secondary statelist
    }

    state.barsCountOffset = 0;

    for (var i = 1; i <= maxCountingSortElementValue; i++) {
      state.entries.pop();
      state.backlinks.pop();
    }

    state.lineNo = 0;
    state.status = 'List sorted!';
    StateHelper.updateCopyPush(statelist, state);
    secondaryStatelist.push(null); //copy the array and push it into the secondary statelist

    this.play(callback);
    return true;
  }

  this.randomizedQuickSort = function(callback) {
    quickSortUseRandomizedPivot = true;
    quickSortStart();

    this.play(callback);
    return true;
  }

  this.quickSort = function(callback) {
    quickSortUseRandomizedPivot = false;
    quickSortStart();

    this.play(callback);
    return true;
  }

  var quickSortStart = function() {
    var numElements = statelist[0].backlinks.length;
    var state = StateHelper.copyState(statelist[statelist.length - 1]);

    populatePseudocode([
      'for each (unsorted) partition',
      (quickSortUseRandomizedPivot) ? 'randomly select pivot, swap with first element' : 'set first element as pivot',
      '  storeIndex = pivotIndex + 1',
      '  for i = pivotIndex + 1 to rightmostIndex',
      '    if element[i] < element[pivot]',
      '      swap(i, storeIndex); storeIndex++',
      '  swap(pivot, storeIndex - 1)'
    ]);

    quickSortSplit(state, 0, numElements - 1);

    state.lineNo = 0;
    state.status = 'List sorted!';

    for (var i = 0; i < numElements; i++)
      state.backlinks[i].highlight = HIGHLIGHT_NONE; //unhighlight everything
    StateHelper.updateCopyPush(statelist, state);
  }

  var quickSortSplit = function(state, startIndex, endIndex) { //startIndex & endIndex inclusive
    state.status = 'Working on partition [{partition}] (index {startIndex} to {endIndex} both inclusive).'
                  .replace("{partition}", state.backlinks.slice(startIndex, endIndex + 1).map(function(d) {
                     return d.value;
                  }))
                  .replace("{startIndex}", startIndex).replace("{endIndex}", endIndex);
    state.lineNo = 1;

    if (startIndex > endIndex)
      return;

    if (startIndex == endIndex) {
      state.status += ' Since partition size == 1, element inside partition is necessarily at sorted position.';
      state.backlinks[startIndex].highlight = HIGHLIGHT_SORTED;
      StateHelper.updateCopyPush(statelist, state);
      return;
    }

    var middleIndex = quickSortPartition(state, startIndex, endIndex);
    quickSortSplit(state, startIndex, middleIndex - 1);
    quickSortSplit(state, middleIndex + 1, endIndex);
  }

  var quickSortPartition = function(state, startIndex, endIndex) {

    var pivotIndex;
    if (quickSortUseRandomizedPivot) {

      pivotIndex = generateRandomNumber(startIndex, endIndex);

      state.status += ' Randomly selected {pivot} (index {index}) as pivot.'.replace("{pivot}", state.backlinks[pivotIndex].value).replace("{index}", pivotIndex);
      state.lineNo = [1, 2];

      state.backlinks[pivotIndex].highlight = HIGHLIGHT_PIVOT;
      StateHelper.updateCopyPush(statelist, state);

      if (pivotIndex != startIndex) {
        state.status = 'Swap pivot ({pivot}}, index {index}) with first element ({first}, index {firstIndex}). (storeIndex = {storeIndex}.)'.replace("{pivot}", state.backlinks[pivotIndex].value).replace("{index}", pivotIndex)
              .replace("{first}", state.backlinks[startIndex].value).replace("{firstIndex}", startIndex).replace("{storeIndex}", (startIndex + 1));

        state.lineNo = [2, 3];

        EntryBacklinkHelper.swapBacklinks(state.backlinks, pivotIndex, startIndex);
        pivotIndex = startIndex;
        StateHelper.updateCopyPush(statelist, state);
      }
    }
    else {
      pivotIndex = startIndex;

      state.status += ' Selecting {pivot} as pivot. (storeIndex = {storeIndex}.)'.replace("{pivot}", state.backlinks[pivotIndex].value).replace("{storeIndex}", (startIndex + 1));
      state.lineNo = [1, 2, 3];

      state.backlinks[pivotIndex].highlight = HIGHLIGHT_PIVOT;
      StateHelper.updateCopyPush(statelist, state);
    }

    var storeIndex = pivotIndex + 1;
    var pivotValue = state.backlinks[pivotIndex].value;

    for (var i = storeIndex; i <= endIndex; i++) {
      state.status = 'Checking if {val} < {pivot} (pivot).'.replace("{val}", state.backlinks[i].value).replace("{pivot}", pivotValue);
      state.lineNo = [4, 5];

      state.backlinks[i].highlight = HIGHLIGHT_SPECIAL;
      StateHelper.updateCopyPush(statelist, state);
      if (state.backlinks[i].value < pivotValue) {
        state.status = '{val} < {pivot} (pivot) is true. Swapping index {idx} (value = {val}) with element at storeIndex (index = {storeIdx}, value = {storeVal}). (Value of storeIndex after swap = {newStoreIdx}).'.replace("{val}", state.backlinks[i].value).replace("{pivot}", pivotValue)
              .replace("{idx}", i).replace("{storeIdx}", storeIndex).replace("{storeVal}", state.backlinks[storeIndex].value).replace("newStoreIdx", (storeIndex + 1));
        state.lineNo = [4, 6];

        if (i != storeIndex) {
          EntryBacklinkHelper.swapBacklinks(state.backlinks, storeIndex, i);
          StateHelper.updateCopyPush(statelist, state);
        }

        state.backlinks[storeIndex].highlight = HIGHLIGHT_LEFT;
        storeIndex++;
      }
      else {
        state.backlinks[i].highlight = HIGHLIGHT_RIGHT;
      }
    }
    state.status = 'Iteration complete.';
    state.lineNo = 4;
    StateHelper.updateCopyPush(statelist, state);
    if (storeIndex - 1 != pivotIndex) {
      state.status = 'Swapping pivot (index = {pivotIdx}, value = {pivot}) with element at storeIndex - 1 (index = {newIdx}, value = {newVal}).'.replace("{pivotIdx}", pivotIndex).replace("{pivot}", pivotValue)
            .replace("{newIdx}", (storeIndex - 1)).replace("{newVal}", state.backlinks[storeIndex - 1].value);
      state.lineNo = 7;
      EntryBacklinkHelper.swapBacklinks(state.backlinks, storeIndex - 1, pivotIndex);
      StateHelper.updateCopyPush(statelist, state);
    }

    state.status = 'Pivot is now at its sorted position.';
    state.lineNo = 7;

    for (var i = startIndex; i <= endIndex; i++)
      state.backlinks[i].highlight = HIGHLIGHT_NONE; //unhighlight everything
    state.backlinks[storeIndex - 1].highlight = HIGHLIGHT_SORTED;
    StateHelper.updateCopyPush(statelist, state);

    return storeIndex - 1;
  }

  this.mergeSort = function(callback) {
    var numElements = statelist[0].backlinks.length;
    var state = StateHelper.copyState(statelist[0]);

    populatePseudocode([
      'split each element into partitions of size 1',
      'recursively merge adjancent partitions',
      '  for i = leftPartStartIndex to rightPartLastIndex inclusive',
      '    if leftPartHeadValue <= rightPartHeadValue',
      '      copy leftPartHeadValue',
      '    else: copy rightPartHeadValue' + ((this.computeInversionIndex) ? '; Increase InvIdx' : ""),
      'copy elements back to original array'
    ]);

    mergeSortInversionIndexCounter = 0;

    for (var i = 0; i < numElements; i++) {
      state.backlinks[i].highlight = HIGHLIGHT_RAINBOW[i];
    }

    state.status = 'We split the array into partitions of 1 (each partition takes on a distinct color).';
    status.lineNo = 1;
    StateHelper.updateCopyPush(statelist, state);

    this.mergeSortSplitMerge(state, 0, numElements);

    for (var i = 0; i < numElements; i++)
      state.backlinks[i].highlight = HIGHLIGHT_NONE; //unhighlight everything

    state.status = 'List sorted!';
    if (this.computeInversionIndex) {
      state.status += ' (Inversion Index = {idx}.)'.replace("{idx}", mergeSortInversionIndexCounter);
    }

    state.lineNo = 0;
    StateHelper.updateCopyPush(statelist, state);

    this.play(callback);
    return true;
  }

  this.mergeSortSplitMerge = function(state, startIndex, endIndex) { //startIndex inclusive, endIndex exclusive
    if (endIndex - startIndex <= 1)
      return;

    var middleIndex = Math.ceil((startIndex + endIndex) / 2);
    this.mergeSortSplitMerge(state, startIndex, middleIndex);
    this.mergeSortSplitMerge(state, middleIndex, endIndex);
    this.mergeSortMerge(state, startIndex, middleIndex, endIndex)

    // Copy array back
    state.status = 'We copy the elements from the new array back into the original array.';
    state.lineNo = 7;

    var duplicateBacklinks = new Array();
    for (var i = startIndex; i < endIndex; i++) {
      var newPosition = state.backlinks[i].secondaryPositionStatus;
      duplicateBacklinks[newPosition] = state.backlinks[i];
    }

    for (var i = startIndex; i < endIndex; i++) {
      state.backlinks[i] = duplicateBacklinks[i];
    }

    for (var i = startIndex; i < endIndex; i++) {
      state.backlinks[i].secondaryPositionStatus = POSITION_USE_PRIMARY;
      StateHelper.updateCopyPush(statelist, state);
    }
  }

  this.mergeSortMerge = function(state, startIndex, middleIndex, endIndex) {
    var leftIndex = startIndex;
    var rightIndex = middleIndex;

    var newHighlightColor = state.backlinks[startIndex].highlight;

    state.status = 'We now merge partitions [{partition1}] (index {startIdx1} to {endIdx1} both inclusive) and [{partition2}] (index {startIdx2} to {endIdx2} both inclusive).'
        .replace('{partition1}', state.backlinks.slice(startIndex, middleIndex).map(function(d) {
          return d.value;
        }))
        .replace("{startIdx1}", startIndex).replace("{endIdx1}", (middleIndex - 1))
        .replace("{partition2}", state.backlinks.slice(middleIndex, endIndex).map(function(d) {
          return d.value;
        }))
        .replace("{startIdx2}", middleIndex).replace("{endIdx2}", (endIndex - 1));
    state.lineNo = 2;

    state.backlinks[leftIndex].highlight = makePaler(state.backlinks[leftIndex].highlight);
    state.backlinks[rightIndex].highlight = makePaler(state.backlinks[rightIndex].highlight);
    StateHelper.updateCopyPush(statelist, state);

    for (var i = startIndex; i < endIndex; i++) {
      // Note here we don't actually copy the elements into a new array, like in a usual mergesort.
      // This is left instead to the mergeSortSplitMerge to handle as it's easier there.
      // (We use the useSecondaryPostion property to overcome this lack-of-copying.)
      if (leftIndex < middleIndex && (rightIndex >= endIndex || state.backlinks[leftIndex].value <= state.backlinks[rightIndex].value)) {
        state.backlinks[leftIndex].highlight = newHighlightColor;
        state.backlinks[leftIndex].secondaryPositionStatus = i;

        if (rightIndex < endIndex) {
          state.status = 'Since {leftPart} (left partition) <= {rightPart} (right partition), we copy {leftPart} into new array.'
            .replace("{leftPart}", state.backlinks[leftIndex].value).replace("{rightPart}", state.backlinks[rightIndex].value);
        }
        else {
          state.status = 'Since right partition is empty, we copy {leftPart} (left partition) into new array.'.replace("{leftPart}", state.backlinks[leftIndex].value);
        }
        state.lineNo = [3, 4, 5];

        leftIndex++;
        if (leftIndex != middleIndex)
          state.backlinks[leftIndex].highlight = makePaler(state.backlinks[leftIndex].highlight);

        StateHelper.updateCopyPush(statelist, state);
      }
      else {
        state.backlinks[rightIndex].highlight = newHighlightColor;
        state.backlinks[rightIndex].secondaryPositionStatus = i;

        if (leftIndex < middleIndex) {
          state.status = 'Since {leftPart} (left partition) > {rightPart} (right partition), we copy {rightPart} into new array.'
            .replace("{leftPart}", state.backlinks[leftIndex].value).replace("{rightPart}", state.backlinks[rightIndex].value);
        }
        else {
          state.status = 'Since left partition is empty, we copy {rightPart} (right partition) into new array.'.replace("{rightPart}", state.backlinks[rightIndex].value);
        }

        if (this.computeInversionIndex) {
          mergeSortInversionIndexCounter += middleIndex - leftIndex;
          state.status += '(We add size_of_left_partition (= {sizeofleft}) to the inversionIndexCounter ({inversionidxcounter}).)'
            .replace("{sizeofleft}", (middleIndex - leftIndex)).replace("{inversionidxcounter}", mergeSortInversionIndexCounter);
        }
        else {
          state.status += 'wierd';
        }
        state.lineNo = [3, 6];

        rightIndex++;
        if (rightIndex != endIndex)
          state.backlinks[rightIndex].highlight = makePaler(state.backlinks[rightIndex].highlight);

        StateHelper.updateCopyPush(statelist, state);
      }
    }
  }

  this.insertionSort = function(callback) {
    var numElements = statelist[0].backlinks.length;
    var state = StateHelper.copyState(statelist[0]);

    populatePseudocode([
      'mark first element as sorted',
      'for each unsorted element X',
      '  &#39;extract&#39; the element X',
      '  for j = lastSortedIndex down to 0',
      '    if current element j &gt; X',
      '      move sorted element to the right by 1',
      '    break loop and insert X here'
    ]);

    // First element always sorted
    state.lineNo = 1;
    // Mark the first element ({firstVal}) as sorted.
    state.status = 'Mark the first element ({firstVal}) as sorted.'.replace("{firstVal}", state.backlinks[0].value);
    state.backlinks[0].highlight = HIGHLIGHT_SORTED;
    StateHelper.updateCopyPush(statelist, state);

    for (var i = 1; i < numElements; i++) {
      // Highlight first unsorted element
      state.lineNo = [2, 3];
      // Extract the first unsorted element ({val}).
      state.status = 'Extract the first unsorted element ({val}).'.replace("{val}", state.backlinks[i].value);
      state.backlinks[i].highlight = HIGHLIGHT_SPECIAL;
      state.backlinks[i].secondaryPositionStatus = POSITION_USE_SECONDARY_IN_DEFAULT_POSITION;
      StateHelper.updateCopyPush(statelist, state);

      for (var j = i-1; j >= 0; j--) {
        state.lineNo = 4;
        // Figure where to insert extracted element.
        // Comparing with sorted element {val}.
        state.status = 'Figure where to insert extracted element; comparing with sorted element {val}.'.replace("{val}", state.backlinks[j].value);;
        state.backlinks[j].highlight = HIGHLIGHT_STANDARD;
        StateHelper.updateCopyPush(statelist, state);

        if (state.backlinks[j].value > state.backlinks[j+1].value) {
          state.lineNo = [5, 6];
          // {val1} > {val2} is true.
          // Hence move current sorted element ({val1}) to the right by 1.
          state.status = '{val1} > {val2} is true, hence move current sorted element ({val1}) to the right by 1.'.replace("{val1}", state.backlinks[j].value).replace("{val2}", state.backlinks[j+1].value);
          EntryBacklinkHelper.swapBacklinks(state.backlinks, j, j+1);
          StateHelper.updateCopyPush(statelist, state);
          state.backlinks[j+1].highlight = HIGHLIGHT_SORTED;
        }
        else {
          state.lineNo = 7;
          // {val1} > {val2} is false.
          // Insert extracted element at current position.
          state.status = '{val1} > {val2} is false, insert element at current position.'.replace("{val1}", state.backlinks[j].value).replace("{val2}", state.backlinks[j+1].value);
          state.backlinks[j].highlight = HIGHLIGHT_SORTED;
          state.backlinks[j+1].secondaryPositionStatus = POSITION_USE_PRIMARY;
          state.backlinks[j+1].highlight = HIGHLIGHT_SORTED;
          StateHelper.updateCopyPush(statelist, state);
          break;
        }
      }

      if (state.backlinks[0].secondaryPositionStatus == POSITION_USE_SECONDARY_IN_DEFAULT_POSITION) {
        state.lineNo = 4;
        // At beginning of array (nothing to compare).
        // Hence insert extracted element at current position.
        state.status = 'At beginning of array (nothing to compare), hence insert element at current position.';
        state.backlinks[0].secondaryPositionStatus = POSITION_USE_PRIMARY;
        state.backlinks[0].highlight = HIGHLIGHT_SORTED;
        StateHelper.updateCopyPush(statelist, state);
      }
    }

    for (var i = 0; i < numElements; i++)
      state.backlinks[i].highlight = HIGHLIGHT_NONE; //unhighlight everything
    state.lineNo = 0;
    // The array/list is now sorted.
    state.status = 'List sorted!';
    StateHelper.updateCopyPush(statelist, state);

    this.play(callback);
    return true;
  }

  this.selectionSort = function(callback) {
    var numElements = statelist[0].backlinks.length;
    var state = StateHelper.copyState(statelist[0]);

    populatePseudocode([
      'repeat (numOfElements - 1) times',
      '  set the first unsorted element as the minimum',
      '  for each of the unsorted elements',
      '    if element < currentMinimum',
      '      set element as new minimum',
      '  swap minimum with first unsorted position'
    ]);

    for (var i = 0; i < numElements-1; i++) {
      var minPosition = i;

      // Iteration {iteration}: Set {val} as the current minimum.
      // Then iterate through the rest to find the true minimum.
      state.status = 'Iteration {iteration}: Set {val} as the current minimum, then iterate through the remaining unsorted elements to find the true minimum.'.replace("{iteration}", (i+1)).replace("{val}", state.backlinks[i].value);
      state.lineNo = [1, 2, 3];
      state.backlinks[minPosition].highlight = HIGHLIGHT_SPECIAL;

      StateHelper.updateCopyPush(statelist, state);

      for (var j = i+1; j < numElements; j++) {
        // Check if {val} is smaller than the current minimum ({minVal}).
        state.status = 'Check if {val} is smaller than the current minimum ({minVal}).'.replace("{val}", state.backlinks[j].value).replace("{minVal}", state.backlinks[minPosition].value);
        state.lineNo = 4;
        state.backlinks[j].highlight = HIGHLIGHT_STANDARD;
        StateHelper.updateCopyPush(statelist, state);

        state.backlinks[j].highlight = HIGHLIGHT_NONE;

        if (state.backlinks[j].value < state.backlinks[minPosition].value) {
          state.status = 'Set {val} as the new minimum.'.replace("{val}", state.backlinks[j].value);
          state.lineNo = 5;
          state.backlinks[minPosition].highlight = HIGHLIGHT_NONE;
          state.backlinks[j].highlight = HIGHLIGHT_SPECIAL;

          minPosition = j;
          StateHelper.updateCopyPush(statelist, state);
        }
      }

      if (minPosition != i) { // Highlight the first-most unswapped position, if it isn't the minimum
        // Set {val} as the new minimum.
        state.status = 'Swap the minimum ({minVal}) with the first unsorted element ({element}).'.replace("{minVal}", state.backlinks[minPosition].value).replace("{element}", state.backlinks[i].value);
        state.lineNo = 6;
        state.backlinks[i].highlight = HIGHLIGHT_SPECIAL;
        StateHelper.updateCopyPush(statelist, state);

        EntryBacklinkHelper.swapBacklinks(state.backlinks, minPosition, i);
        StateHelper.updateCopyPush(statelist, state);
      }
      else {
        // As the minimum is the first unsorted element, no swap is necessary.
        state.status = 'As the minimum is the first unsorted element, no swap is necessary.';
        state.lineNo = 6;
        StateHelper.updateCopyPush(statelist, state);
      }

      // {val} is now considered sorted.
      state.status = '{val} is now considered sorted.'.replace("{val}", state.backlinks[i].value);
      state.backlinks[minPosition].highlight = HIGHLIGHT_NONE;
      state.backlinks[i].highlight = HIGHLIGHT_SORTED;
      StateHelper.updateCopyPush(statelist, state);
    }

    for (var i = 0; i < numElements; i++)
      state.backlinks[i].highlight = HIGHLIGHT_NONE; // un-highlight everything
    // The array/list is now sorted.
    // (After all iterations, the last element will naturally be sorted.)
    state.status = 'List sorted!' + '<br>' + '(After all iterations, the last element will naturally be sorted.)';
    status.lineNo = 0;
    StateHelper.updateCopyPush(statelist, state);

    this.play(callback);
    return true;
  }

  this.bubbleSort = function(callback) {
    var numElements = statelist[0].backlinks.length;
    var state = StateHelper.copyState(statelist[0]);
    var swapCounter = 0;

    populatePseudocode([
      'do',
      '  swapped = false',
      '  for i = 1 to indexOfLastUnsortedElement-1',
      '    if leftElement > rightElement',
      '      swap(leftElement, rightElement)',
      '      swapped = true' + ((this.computeInversionIndex) ? '; swapCounter++' : ""),
      'while swapped'
    ]);

    var swapped;
    var indexOfLastUnsortedElement = numElements;
    do {
      swapped = false;

      // Set the swapped flag to false.
      // Then iterate from 1 to {endIdx} inclusive.
      state.status = 'Set the swapped flag to false.<div>Then iterate from 1 to {endIdx} inclusive.</div>'.replace("{endIdx}", indexOfLastUnsortedElement-1);
      state.lineNo = [2, 3];
      StateHelper.updateCopyPush(statelist, state);

      for (var i = 1; i < indexOfLastUnsortedElement; i++) {
        state.backlinks[i-1].highlight = HIGHLIGHT_STANDARD;
        state.backlinks[i].highlight = HIGHLIGHT_STANDARD;

        // Checking if {val1} > {val2} and swap them if that is true.
        // The current value of swapped = {swapped}.
        state.status = '<div>Checking if {val1} &gt; {val2} and swap them if that is true.</div>The current value of swapped = {swapped}.'.replace("{val1}", state.backlinks[i-1].value).replace("{val2}", state.backlinks[i].value).replace("{swapped}", swapped);
        state.lineNo = 4;
        StateHelper.updateCopyPush(statelist, state);

        if (state.backlinks[i-1].value > state.backlinks[i].value) {
          swapped = true;

          // Swapping the positions of {val1} and {val2}.
          // Set swapped = true.
          state.status = 'Swapping the positions of {val1} and {val2}.<div>Set swapped = true.</div>'.replace("{val1}", state.backlinks[i-1].value).replace("{val2}", state.backlinks[i].value);
          if (this.computeInversionIndex) {
            swapCounter++;
            // For inversion index computation: Add 1 to swapCounter.
            // The current value of swapCounter = {swapCounter}.
            state.status += ' For inversion index: Add 1 to swapCounter.<div>Current value of swapCounter = {swapCounter}.</div>'.replace("{swapCounter}", swapCounter);
          }

          state.lineNo = [5, 6];

          EntryBacklinkHelper.swapBacklinks(state.backlinks, i, i-1);
          StateHelper.updateCopyPush(statelist, state);
        }

        state.backlinks[i-1].highlight = HIGHLIGHT_NONE;
        state.backlinks[i].highlight = HIGHLIGHT_NONE;
      }

      indexOfLastUnsortedElement--;
      state.backlinks[indexOfLastUnsortedElement].highlight = HIGHLIGHT_SORTED;
      if (swapped == false)
        // No swap is done in this pass.
        // We can terminate Bubble Sort now.
        state.status = 'No swap is done in this pass.<div>We can terminate Bubble Sort now</div>';
      else
        // Mark last unsorted element as sorted now.
        // As at least one swap is done in this pass, we continue.
        state.status = '<div>Mark last unsorted element as sorted now.</div><div>As at least one swap is done in this pass, we continue.</div>';

      state.lineNo = 7;
      StateHelper.updateCopyPush(statelist, state);
    }
    while (swapped);

    for (var i = 0; i < numElements; i++)
      state.backlinks[i].highlight = HIGHLIGHT_NONE; //un-highlight everything

    // The array/list is now sorted.
    state.status = 'List sorted!';
    if (this.computeInversionIndex)
      // Inversion Index = {swapCounter}.
      state.status += ' Inversion Index = {swapCounter}.'.replace("swapCounter", swapCounter);

    state.lineNo = 0;
    StateHelper.updateCopyPush(statelist, state);

    this.play(callback);
    return true;
  }

  this.clearPseudocode = function() { populatePseudocode([]); }

  var populatePseudocode = function(code) {
    var i = 1;
    for (; i <= 7 && i <= code.length; i++) {
      $("#code" + i).html(
        code[i - 1].replace(
        /^\s+/,
        function(m) { return m.replace(/\s/g, "&nbsp;"); }
        )
      );
    }
    for (; i <= 7; i++) {
      $("#code" + i).html("");
    }
  }

  
  this.getAnimationDuration = function() { return transitionTime; }

  this.setAnimationDuration = function(x) {
    transitionTime = x;
    if (issPlaying) {
      clearInterval(animInterval);
      animInterval = setInterval(function() {
        drawCurrentState();
        if (currentStep < (statelist.length-1))
          currentStep++;
        else
          clearInterval(animInterval);
      }, transitionTime);
    }
  }

  this.getCurrentIteration = function() { return currentStep; }

  this.getTotalIteration = function() { return statelist.length; }

  this.forceNext = function() {
    if ((currentStep + 1) < statelist.length)
      currentStep++;
    drawCurrentState();
  }

  this.forcePrevious = function() {
    if ((currentStep-1) >= 0)
      currentStep--;
    drawCurrentState();
  }

  this.jumpToIteration = function(n) {
    currentStep = n;
    drawCurrentState();
  }

  this.play = function(callback) {
    issPlaying = true;
    drawCurrentState();
    animInterval = setInterval(function() {
      drawCurrentState();
      if (currentStep < (statelist.length-1))
        currentStep++;
      else {
        clearInterval(animInterval);
        if (typeof callback == 'function') callback();
      }
    }, transitionTime);
  }

  this.pause = function() {
    issPlaying = false;
    clearInterval(animInterval);
  }

  this.replay = function() {
    issPlaying = true;
    currentStep = 0;
    drawCurrentState();
    animInterval = setInterval(function() {
      drawCurrentState();
      if (currentStep < (statelist.length-1))
        currentStep++;
      else
        clearInterval(animInterval);
    }, transitionTime);
  }

  this.stop = function() {
    issPlaying = false;
    statelist = [statelist[0]]; //clear statelist to original state, instead of new Array();
    secondaryStatelist = [null];
    currentStep = 0;
    drawState(0);
  }
}

// sorting action
var actionsWidth = 150;
var statusCodetraceWidth = 420;

var isCreateOpen = false;
var isInsertOpen = false;
var isRemoveOpen = false;
var isSortOpen = false;

function openCreate() {
  if (!isCreateOpen) {
    $('.create').fadeIn('fast');
    isCreateOpen = true;
  }
}

function closeCreate() {
  if (isCreateOpen) {
    $('.create').fadeOut('fast');
    $('#create-err').html("");
    isCreateOpen = false;
  }
}

function openInsert() {
  if (!isInsertOpen) {
    $('.insert').fadeIn('fast');
    isInsertOpen = true;
  }
}

function closeInsert() {
  if (isInsertOpen) {
    $('.insert').fadeOut('fast');
    $('#insert-err').html("");
    isInsertOpen = false;
  }
}

function openRemove() {
  if (!isRemoveOpen) {
    $('.remove').fadeIn('fast');
    isRemoveOpen = true;
  }
}

function closeRemove() {
  if (isRemoveOpen) {
    $('.remove').fadeOut('fast');
    $('#remove-err').html("");
    isRemoveOpen = false;
  }
}

function openSort() {
  if (!isSortOpen) {
    $('.sort').fadeIn('fast');
    isSortOpen = true;
  }
}

function closeSort() {
  if (isSortOpen) {
    $('.sort').fadeOut('fast');
    $('#sort-err').html("");
    isSortOpen = false;
  }
}

function hideEntireActionsPanel() {
  closeCreate();
  closeInsert();
  closeRemove();
  closeSort();
  hideActionsPanel();
}



// local
$(function() {
  AbbreviateTitle();
  hideAllSubmenus();
  var eight_modes = ["Bubble", "Selection", "Insertion", "Merge", "Quick", "RandomizedQuick", "Counting", "Radix"];
  $('#title-'+eight_modes[Math.floor(Math.random()*8)]).click(); // randomly open one of the eight sorting algorithm mode every time
  $('#play').hide();

  d3.selectAll("#radix-sort-bucket-labels-collection span")
    .style({"left": function(d, i) {
                  return 17.5 + i * 65 + "px";
          }});
  var sortMode = getQueryVariable("mode");
  if (sortMode.length > 0) {
     $('#title-' + sortMode).click();
  }
  var createArray = getQueryVariable("create");
  if (createArray.length > 0) {
    $('#userdefined-input').val(createArray);
    createList("userdefined");
  }

  $('#create').click(function() {
    closeInsert();
    closeRemove();
    closeSort();
    openCreate();
  });

  $('#insert').click(function() {
    closeCreate();
    closeRemove();
    closeSort();
    openInsert();
  });

  $('#remove').click(function() {
    closeCreate();
    closeInsert();
    closeSort();
    openRemove();
  });

  $('#sort').click(function() {
    closeCreate();
    closeInsert();
    closeRemove();
    openSort();
  });
});

//this viz-specific code
var gw = new Sorting();

const DEFAULT_DATA       = "3,44,38,5,47,15,36,26,27,2,46,4,19,50,48";
const DEFAULT_COUNT_DATA = "2, 3, 8, 7, 1, 2, 2, 2, 7, 3, 9, 8, 2, 1, 4, 2, 4, 6, 9, 2";
const DEFAULT_RADIX_DATA = "3221, 1, 10, 9680, 577, 9420, 7, 5622, 4793, 2030, 3138, 82, 2599, 743, 4127";

// title changing
function AbbreviateTitle() {
  $('#title-Bubble').text("BUBBLE SORT").attr('title', 'Bubble Sort');
  $('#title-Selection').text("SELECTION SORT").attr('title', 'Selection Sort');
  $('#title-Insertion').text("INSERTION SORT").attr('title', 'Insertion Sort');
  $('#title-Merge').text("MERGE SORT").attr('title', 'Merge Sort');
  $('#title-Quick').text("QUIK SORT").attr('title', 'Quick Sort');
  // $('#title-RandomizedQuick').text("R-Q").attr('title', 'Random Quick Sort');
  // $('#title-Counting').text("COU").attr('title', 'Counting Sort');
  // $('#title-Radix').text("RAD").attr('title', 'Radix Sort');
}
$('#title-Bubble').click(function() {
  showStandardCanvas();
  $("#sort-bubble-merge-inversion").css("display", "");
  $('#current-action p').html('Bubble Sort');
  changeSortType(gw.bubbleSort);
  AbbreviateTitle();
  $('#title-Bubble').text('Bubble Sort');
});
$('#title-Selection').click(function() {
  showStandardCanvas();
  hideAllSortingOptions();
  $('#current-action p').html('Selection Sort');
  changeSortType(gw.selectionSort);
  AbbreviateTitle();
  $('#title-Selection').text('Selection Sort');
});
$('#title-Insertion').click(function() {
  showStandardCanvas();
  hideAllSortingOptions();
  $('#current-action p').html('Insertion Sort');
  changeSortType(gw.insertionSort);
  AbbreviateTitle();
  $('#title-Insertion').text('Insertion Sort');
});
$('#title-Merge').click(function() {
  showStandardCanvas();
  hideAllSortingOptions();
  $("#sort-bubble-merge-inversion").css("display", "");
  $('#current-action p').html('Merge Sort');
  AbbreviateTitle();
  changeSortType(gw.mergeSort);
  $('#title-Merge').text('Merge Sort');
});
$('#title-Quick').click(function() {
  showStandardCanvas();
  hideAllSortingOptions();
  $('#current-action p').html('Quick Sort');
  changeSortType(gw.quickSort);
  AbbreviateTitle();
  $('#title-Quick').text('Quick Sort');
});
$('#title-RandomizedQuick').click(function() {
  showStandardCanvas();
  hideAllSortingOptions();
  $('#current-action p').html('Random Quick Sort');
  changeSortType(gw.randomizedQuickSort);
  AbbreviateTitle();
  $('#title-RandomizedQuick').text('Random Quick Sort');
});
$('#title-Counting').click(function() {
  showStandardCanvas();
  $("#viz-counting-sort-secondary-canvas").show();
  hideAllSortingOptions();
  $('#current-action p').html('Counting Sort');
  changeSortType(gw.countingSort, DEFAULT_COUNT_DATA);
  AbbreviateTitle();
  $('#title-Counting').text('Counting Sort');
});
$('#title-Radix').click(function() {
  hideAllCanvases();
  $("#viz-radix-sort-canvas").show();
  hideAllSortingOptions();
  $('#current-action p').html('Radix Sort');
  changeSortType(gw.radixSort, DEFAULT_RADIX_DATA);
  AbbreviateTitle();
  $('#title-Radix').text('Radix Sort');
});

function changeSortType(newSortingFunction, customNumberList) {
  if (!customNumberList)
    $('#userdefined-input').val(DEFAULT_DATA);
  else
    $('#userdefined-input').val(customNumberList);
  createList('userdefined');

  if (isPlaying) stop();
  showActionsPanel();
  hideStatusPanel();
  hideCodetracePanel();
  gw.clearPseudocode();
  gw.setSelectedSortFunction(newSortingFunction);
}

function createList(type) {
  if (isPlaying) stop();
  setTimeout(function() {
    if (gw.createList(type)) {
      $('#progress-bar').slider("option", "max", 0);
      closeCreate();
      isPlaying = false;
    }
  }, 500);
}

function sort(callback) {
  // gw.computeInversionIndex = $('#sort-bubble-merge-inversion-checkbox').prop('checked');
  if (isPlaying) stop();
  setTimeout(function() {
    if (gw.sort(callback)) {
      $('#current-action').show();
      $('#progress-bar').slider("option", "max", gw.getTotalIteration()-1);
      triggerRightPanels();
      isPlaying = true;
    }
  }, 500);
}

// submenu stuff
var lastSubmenuShown = null;

function triggerSubmenu(which) {
  hideAllSubmenus();
  if (lastSubmenuShown == which) {
    lastSubmenuShown = null;
    return;
  }

  lastSubmenuShown = which;

  $(".create").css("bottom", "60px");
  if (which == "sorted") {
    $("#create-sorted-increasing").show();
    $("#create-sorted-decreasing").show();
  }
  else if (which == "nearly-sorted") {
    $("#create-nearly-sorted-increasing").show();
    $("#create-nearly-sorted-decreasing").show();
  }
}

function hideAllSubmenus() {
  $(".create").css("bottom", "92px");
  $("#create-sorted-increasing").hide();
  $("#create-sorted-decreasing").hide();
  $("#create-nearly-sorted-increasing").hide();
  $("#create-nearly-sorted-decreasing").hide();
}

// sort options
function hideAllSortingOptions() {
  $("#sort-bubble-merge-inversion").css("display", "none");
}

// canvas
function hideAllCanvases() {
  $("#viz-canvas").hide();
  $("#viz-counting-sort-secondary-canvas").hide();
  $("#viz-radix-sort-canvas").hide();
}

function showStandardCanvas() {
  $("#viz-canvas").show();
  $("#viz-counting-sort-secondary-canvas").hide();
  $("#viz-radix-sort-canvas").hide();
}

var exploreModeData = [];

// This function will be called before entering E-Lecture Mode
function ENTER_LECTURE_MODE() {
  exploreModeData = gw.currentNumList;
}

// This function will be called before returning to Explore Mode
function ENTER_EXPLORE_MODE() {
  gw.loadNumberList(exploreModeData);
}

// Lecture action functions
function SORT(mode) {
  hideSlide(function() {
    sort(showSlide);
  });
}
function CUSTOM_ACTION(action, data, mode) {}
</script>

</body>
</html>
